<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YY’s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/"/>
  <updated>2020-07-15T02:45:40.768Z</updated>
  <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/</id>
  
  <author>
    <name>shenjiaoyao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读impatient-js的笔记和总结</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/07/15/%E8%AF%BBimpatient-js%E7%9A%84%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/07/15/%E8%AF%BBimpatient-js%E7%9A%84%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-15T02:45:24.000Z</published>
    <updated>2020-07-15T02:45:40.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第六章-语法-syntax"><a href="#第六章-语法-syntax" class="headerlink" title="第六章 语法(syntax)"></a>第六章 语法(syntax)</h3><h4 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h4><h5 id="1-注释-comments"><a href="#1-注释-comments" class="headerlink" title="1.注释(comments)"></a>1.注释(comments)</h5><p>(i)  // 单个注释</p><p>(ii) /*</p><a id="more"></a><p>​     多行</p><p>​     注释</p><p>​     */</p><h5 id="2-布尔值-Booleans"><a href="#2-布尔值-Booleans" class="headerlink" title="2.布尔值(Booleans)"></a>2.布尔值(Booleans)</h5><p>创建 Boolean 对象的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(value);    <span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">Boolean</span>(value);        <span class="comment">//转换函数</span></span><br></pre></td></tr></table></figure><p>当作为一个构造函数（带有运算符 new）调用时，Boolean() 将把它的参数转换成一个布尔值，并且返回一个包含该值的 Boolean 对象。</p><p>如果作为一个函数（不带有运算符 new）调用时，Boolean() 只将把它的参数转换成一个原始的布尔值，并且返回这个值。</p><p><strong>注释：</strong>如果省略 value 参数，或者设置为 0、-0、null、””、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 “false”）。</p><h5 id="3-命名约定"><a href="#3-命名约定" class="headerlink" title="3.命名约定"></a>3.命名约定</h5><p>串联单词的常见大小写样式为：骆驼、下划线（也称为蛇）、破折号（也称为烤肉串）</p><p>通常，JavaScript使用驼峰式大小写，常量除外。</p><p>小写：</p><ul><li>函数，变量： <code>myFunction</code></li><li>方法： <code>obj.myMethod</code></li><li>CSS：<ul><li>CSS实体： <code>special-class</code></li><li>对应的JavaScript变量： <code>specialClass</code></li></ul></li></ul><p>大写：</p><ul><li><p>类： <code>MyClass</code></p></li><li><p>常数： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MY_CONSTANT</span><br></pre></td></tr></table></figure><ul><li>常量通常也以驼峰形式编写： <code>myConstant</code></li></ul></li></ul><p>更多：</p><p>如果参数名称以下划线开头（或为下划线），则表示未使用此参数-例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.map((_x, i) =&gt; i)</span><br></pre></td></tr></table></figure><p>如果对象的属性名称以下划线开头，则该属性被视为私有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueWrapper</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>._value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-标识符-identifiers"><a href="#6-2-标识符-identifiers" class="headerlink" title="6.2 标识符(identifiers)"></a>6.2 标识符(identifiers)</h4><h5 id="1-有效标识符-变量名等"><a href="#1-有效标识符-变量名等" class="headerlink" title="1.有效标识符(变量名等)"></a>1.有效标识符(变量名等)</h5><p>变量名称和属性名称的语法类别称为<strong>标识符</strong>。</p><p>第一个字符：</p><ul><li>Unicode字母（包括带重音符号的<code>é</code>和<code>ü</code>和非拉丁字母的字符，例如<code>α</code>）</li><li><code>$</code></li><li><code>_</code></li></ul><p>后续字符：</p><ul><li>合法的第一个字符</li><li>Unicode数字（包括东方阿拉伯数字）</li><li>其他一些Unicode标记和标点符号</li></ul><h5 id="2-保留字-reserved-words"><a href="#2-保留字-reserved-words" class="headerlink" title="2.保留字(reserved words)"></a>2.保留字(reserved words)</h5><p>保留字不能是变量名，但可以是属性名。</p><p>不应该使用全局变量的名字(<code>String</code>，<code>Math</code>)为自己的变量和参数等。</p><h4 id="6-3-语句-statement-与表达式-expression"><a href="#6-3-语句-statement-与表达式-expression" class="headerlink" title="6.3 语句(statement)与表达式(expression)"></a>6.3 语句(statement)与表达式(expression)</h4><h5 id="1-语句"><a href="#1-语句" class="headerlink" title="1.语句"></a>1.语句</h5><p>一个语句是一段可被执行的代码，并执行某种动作。例如if语句或函数声明等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twice</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-表达式"><a href="#2-表达式" class="headerlink" title="2.表达式"></a>2.表达式</h5><p>一个表达式是一段可被评估的代码，以产生一个值。</p><p>例如，括号之间的代码是一个表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let myStr = (myBool ? &apos;Yes&apos; : &apos;No&apos;);</span><br></pre></td></tr></table></figure><p><code>_?_:_</code>括号之间使用的运算符称为三元运算符。它是<code>if</code>语句的表达式版本。</p><h5 id="3-更多规范"><a href="#3-更多规范" class="headerlink" title="3.更多规范"></a>3.更多规范</h5><ul><li>函数的主体必须是一系列语句</li><li>函数调用或方法调用的参数必须为表达式</li><li>表达式可以用作语句，它们被称为表达式语句；反之则不成立</li></ul><h4 id="6-4-不明确的语法"><a href="#6-4-不明确的语法" class="headerlink" title="6.4 不明确的语法"></a>6.4 不明确的语法</h4><h5 id="1-函数声明和函数表达式"><a href="#1-函数声明和函数表达式" class="headerlink" title="1.函数声明和函数表达式"></a>1.函数声明和函数表达式</h5><p>一个函数声明为一个语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个函数表达式是一个表达式（=的右侧）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const id = function me(x) &#123;</span><br><span class="line">  return x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-对象字面量和块"><a href="#2-对象字面量和块" class="headerlink" title="2.对象字面量和块"></a>2.对象字面量和块</h5><p>在下面的代码中，<code>{}</code>是一个对象字面量：一个创建空对象的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这是一个空的代码块（一条语句）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-消除分歧"><a href="#3-消除分歧" class="headerlink" title="3.消除分歧"></a>3.消除分歧</h5><p>为了解决歧义，以<code>function</code>或<code>{</code>开头的语句永远不会被解释为表达式。如果要让表达式语句以以下任一标记开头，则必须将其用括号括起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="built_in">console</span>.log(x) &#125;)(<span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><p>先通过函数表达式创建了一个函数，然后调用它</p><h4 id="6-5-分号-semicolons"><a href="#6-5-分号-semicolons" class="headerlink" title="6.5 分号(semicolons)"></a>6.5 分号(semicolons)</h4><h5 id="1-法则"><a href="#1-法则" class="headerlink" title="1.法则"></a>1.法则</h5><p>以大括号结尾的语句后面没有分号；如果有，则被解释为空语句。</p><h5 id="2-控制语句-control-statements"><a href="#2-控制语句-control-statements" class="headerlink" title="2.控制语句(control statements)"></a>2.控制语句(control statements)</h5><p>如while loop:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><p>控制语句的主体就是一个语句，它可以是单个的一条语句，但块也是语句，也可以作为控制语句的主体。</p><p>如果下次要一个空的主体，既可以是一个空的语句（只加一个分号），也可以是一个空的块。</p><h4 id="6-6-自动分号插入-ASI"><a href="#6-6-自动分号插入-ASI" class="headerlink" title="6.6 自动分号插入(ASI)"></a>6.6 自动分号插入(ASI)</h4><h5 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h5><p>ASI的工作原理如下。语句的解析将继续进行，直到出现以下任何一种情况：</p><ul><li>分号</li><li>行终止符后跟非法令牌</li></ul><p>换句话说，ASI可以看作是在换行符处插入分号。</p><h5 id="2-意外触发"><a href="#2-意外触发" class="headerlink" title="2.意外触发"></a>2.意外触发</h5><p>JavaScript禁止在某些令牌后换行。如果确实插入换行符，也会插入分号。</p><p>与实际最相关的令牌是<code>return</code>。例如，考虑以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br><span class="line">&#123;</span><br><span class="line">  first: <span class="string">'jane'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码被解析为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#123;</span><br><span class="line">  first: <span class="string">'jane'</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>可以防止意外地返回一行中令牌<code>return</code>后的值。</p><h5 id="3-最佳做法"><a href="#3-最佳做法" class="headerlink" title="3.最佳做法"></a>3.最佳做法</h5><p>建议始终编写分号。</p><h4 id="6-7-严格模式-strict-与马虎-sloppy-模式"><a href="#6-7-严格模式-strict-与马虎-sloppy-模式" class="headerlink" title="6.7 严格模式(strict)与马虎(sloppy)模式"></a>6.7 严格模式(strict)与马虎(sloppy)模式</h4><p>脚本中的默认模式为普通的“马虎”模式（代码片段是模块的先驱，并受浏览器支持），而严格模式是模块和类中的默认模式，可以在脚本中打开。在此模式下，正常模式的一些陷阱被消除，并且引发了更多异常。</p><p>在现代JavaScript代码中，几乎不会遇到马虎模式，该模式几乎总是位于模块中。</p><h5 id="1-严格模式"><a href="#1-严格模式" class="headerlink" title="1.严格模式"></a>1.严格模式</h5><p>在脚本文件和CommonJS模块中，通过在第一行中放置以下代码，可以为完整文件打开严格模式(ECMAScript 5之前的版本会完全忽略它)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br></pre></td></tr></table></figure><p>还可以仅使用一个功能就打开严格模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionInStrictMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-马虎模式的陷阱"><a href="#2-马虎模式的陷阱" class="headerlink" title="2.马虎模式的陷阱"></a>2.马虎模式的陷阱</h5><p>(i)改变未声明的变量将创造全局变量</p><p>(ii)函数声明在严格模式中是块作用域但在马虎模式中是函数作用域</p><p>在严格模式下，通过函数声明创建的变量仅存在于最里面的封闭块中</p><p>(iii)更改不可变数据时，草率模式不会引发异常</p><p>在严格模式下，如果尝试更改不可变数据，则会出现异常;而在草率模式下，分配静默失败</p><h3 id="第十章-变量和赋值-variables-and-assignments"><a href="#第十章-变量和赋值-variables-and-assignments" class="headerlink" title="第十章 变量和赋值(variables and assignments)"></a>第十章 变量和赋值(variables and assignments)</h3><h4 id="10-1-let"><a href="#10-1-let" class="headerlink" title="10.1 let"></a>10.1 let</h4><p>通过<code>let</code>声明的变量是可变的，而且可以同时声明和赋值</p><h4 id="10-2-const"><a href="#10-2-const" class="headerlink" title="10.2 const"></a>10.2 const</h4><p>通过<code>const</code>声明的变量是不变的，必须立即初始化</p><h5 id="1-const和不变"><a href="#1-const和不变" class="headerlink" title="1.const和不变"></a>1.const和不变</h5><p><code>const</code>仅表示绑定(变量名称和变量值之间的关联)是不可变的，该值本身可以是可变的，如改变其属性</p><h5 id="2-const和循环"><a href="#2-const和循环" class="headerlink" title="2.const和循环"></a>2.const和循环</h5><p>使用const和for-of循环，每个迭代都会创建新的绑定，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> elem <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 'hello'</span></span><br><span class="line"><span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure><p>但在普通的for循环中，必须使用<code>let</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> elem = arr[i];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-选择"><a href="#3-选择" class="headerlink" title="3. 选择"></a>3. 选择</h5><p>仅在不能使用<code>const</code>时用<code>let</code></p><h4 id="10-3-一个变量的作用域"><a href="#10-3-一个变量的作用域" class="headerlink" title="10.3 一个变量的作用域"></a>10.3 一个变量的作用域</h4><h5 id="1-法则-1"><a href="#1-法则-1" class="headerlink" title="1.法则"></a>1.法则</h5><p>变量的范围是程序可以访问的区域</p><p>通过<code>const</code>和<code>let</code>声明的变量被称为是块作用域的，因为它们的范围始终是周围的最内部块。</p><h5 id="2-阴影变量-Shadowing-variables"><a href="#2-阴影变量-Shadowing-variables" class="headerlink" title="2.阴影变量(Shadowing variables)"></a>2.阴影变量(Shadowing variables)</h5><p>不能在同一级别两次声明同一变量，但可以嵌套一个块，在块外声明相同的变量名；在块内部，内部<code>x</code>是唯一具有该名称的可访问变量，离开块后，可以再次访问旧值。</p><h4 id="10-4-术语-terminology-：静态-static-vs-动态-dynamic"><a href="#10-4-术语-terminology-：静态-static-vs-动态-dynamic" class="headerlink" title="10.4 术语(terminology)：静态(static) vs 动态(dynamic)"></a>10.4 术语(terminology)：静态(static) vs 动态(dynamic)</h4><ul><li><p><em>静态</em>意味着某些东西与源代码有关，无需执行代码即可确定。</p></li><li><p><em>动态</em>意味着在运行时。</p><h5 id="1-静态现象：变量的作用域"><a href="#1-静态现象：变量的作用域" class="headerlink" title="1.静态现象：变量的作用域"></a>1.静态现象：变量的作用域</h5><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x是静态范围，其范围是固定的，并且在运行时不会更改。</p><p>变量的范围形成了一棵静态数。（通过静态嵌套）</p><h5 id="2-动态现象：函数调用"><a href="#2-动态现象：函数调用" class="headerlink" title="2.动态现象：函数调用"></a>2.动态现象：函数调用</h5><p>函数是否被调用只能在运行时确定。</p><p>函数调用形成一棵动态树（通过动态调用）。</p><h4 id="10-5-全局变量和全局对象"><a href="#10-5-全局变量和全局对象" class="headerlink" title="10.5 全局变量和全局对象"></a>10.5 全局变量和全局对象</h4><h5 id="1-法则-2"><a href="#1-法则-2" class="headerlink" title="1.法则"></a>1.法则</h5><p>JavaScript的变量范围是嵌套的。它们形成一棵树：</p><ul><li><p>最外部的作用域是树的根。</p></li><li><p>直接包含在该范围中的范围是根的子级。</p></li></ul><p>根也称为全局范围。在web浏览器中，一个直接位于该范围内的唯一位置是脚本的顶层。全局范围的变量称为全局变量，可在任何地方访问</p><h5 id="2-种类"><a href="#2-种类" class="headerlink" title="2.种类"></a>2.种类</h5><p>全局变量有两种：</p><ul><li>全局<strong>声明</strong>变量是普通变量。<ul><li>只能在脚本的顶层通过<code>const</code>，<code>let</code>和<code>class</code>声明来创建它们。</li></ul></li><li>全局<strong>对象</strong>变量存储在所谓的全局对象的<strong>属性</strong>中<ul><li>它们通过<code>var</code>和函数声明在脚本的顶层创建。</li><li>可以通过全局变量访问全局对象<code>globalThis</code>。它可用于创建，读取和删除全局对象变量。</li><li>除此之外，全局对象变量的工作方式与普通变量类似。</li></ul></li></ul><h4 id="10-6-声明：范围和激活"><a href="#10-6-声明：范围和激活" class="headerlink" title="10.6 声明：范围和激活"></a>10.6 声明：范围和激活</h4><h4 id="10-7-闭包"><a href="#10-7-闭包" class="headerlink" title="10.7 闭包"></a>10.7 闭包</h4></li></ul><h3 id="第十二章-运算符-operators"><a href="#第十二章-运算符-operators" class="headerlink" title="第十二章 运算符(operators)"></a>第十二章 运算符(operators)</h3><h4 id="12-6-Javascript逻辑运算符“或”的应用"><a href="#12-6-Javascript逻辑运算符“或”的应用" class="headerlink" title="12.6 Javascript逻辑运算符“或”的应用"></a>12.6 Javascript逻辑运算符“或”的应用</h4><p>或运算符可以被用来为一个新定义好的变量提供一个默认值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="literal">false</span>,</span><br><span class="line">foobar = <span class="number">5</span>,</span><br><span class="line">foo = bar || foobar; <span class="comment">// foo = 5</span></span><br></pre></td></tr></table></figure><p>在上面这个例子当中，只有当bar蕴涵假的时候，foobar才会将它自身的值传递给foo。</p><p>如果一个变量有可能是空，那么或运算符可以在函数中用来提供一个默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"> a, b </span>)</span>&#123;</span><br><span class="line">    a = a || <span class="number">5</span>;</span><br><span class="line">    b = b || <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'Values:'</span> + a + <span class="string">','</span> +b );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第六章-语法-syntax&quot;&gt;&lt;a href=&quot;#第六章-语法-syntax&quot; class=&quot;headerlink&quot; title=&quot;第六章 语法(syntax)&quot;&gt;&lt;/a&gt;第六章 语法(syntax)&lt;/h3&gt;&lt;h4 id=&quot;6-1-概述&quot;&gt;&lt;a href=&quot;#6-1-概述&quot; class=&quot;headerlink&quot; title=&quot;6.1 概述&quot;&gt;&lt;/a&gt;6.1 概述&lt;/h4&gt;&lt;h5 id=&quot;1-注释-comments&quot;&gt;&lt;a href=&quot;#1-注释-comments&quot; class=&quot;headerlink&quot; title=&quot;1.注释(comments)&quot;&gt;&lt;/a&gt;1.注释(comments)&lt;/h5&gt;&lt;p&gt;(i)  // 单个注释&lt;/p&gt;&lt;p&gt;(ii) /*&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>换电脑所导致的一些麻烦事</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/24/%E6%8D%A2%E7%94%B5%E8%84%91%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BA%BB%E7%83%A6%E4%BA%8B/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/24/%E6%8D%A2%E7%94%B5%E8%84%91%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BA%BB%E7%83%A6%E4%BA%8B/</id>
    <published>2020-05-23T17:30:00.000Z</published>
    <updated>2020-07-11T09:13:36.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="换电脑所导致的一些麻烦事"><a href="#换电脑所导致的一些麻烦事" class="headerlink" title="换电脑所导致的一些麻烦事"></a>换电脑所导致的一些麻烦事</h2><blockquote><p>上一台电脑出现了较大的故障，把它修好的花销还不如直接换一台划算，于是我就入了新机，但麻烦也随之而来。新电脑虽然香，但是环境都得重新装过，还有一些事情想分享给大家。大家以后换电脑的时候应该能对你们有所帮助。</p></blockquote><a id="more"></a><h3 id="hexo的搬迁"><a href="#hexo的搬迁" class="headerlink" title="hexo的搬迁"></a>hexo的搬迁</h3><p>换电脑后要想继续写Blog，需要将Hexo博客从一台电脑迁移到换的电脑上</p><p>具体的操作：</p><p>1.克隆github上面生成的静态文件到本地</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/yourname/yourname.github.io.git</span></span><br></pre></td></tr></table></figure><p>2.把克隆到本地的文件除了git的文件都删掉，找不到git的文件也都删了</p><p><strong>注意</strong>：不要用<code>hexo init</code>初始化</p><p>3.将之前使用hexo写博客时候的所有文件夹搬迁到现在的电脑上，可以忽略node_modules文件夹(之后再用<code>npm install</code>重新安装)</p><p>还有.git文件也可忽略，并用下面的代码重新生成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.gitignore</span></span><br></pre></td></tr></table></figure><p>4.创建一个叫hexo的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>5.提交复制过来的文件到暂存区再提交</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> --all</span><br><span class="line">git commit -m <span class="string">"新建分支源文件"</span></span><br></pre></td></tr></table></figure><p>6.推送分支到github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><p>到这里还没有结束，因为换了电脑，密钥也发生了改变，我们需要重新在github上添加新的密钥</p><p>7.在本地添加SSH key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>只需把邮件地址换成自己的邮件地址，然后一路回车，使用默认值就可</p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，其中id_rsa是私钥，不能泄露出去，而id_rsa.pub是公钥，可以放心地告诉任何人，所以复制id_rsa.pub文件中的内容。</p><p>8.在github中添加SSH key</p><p>登陆github，点击用户头像并打开settings，再点击“SSH and GPG Keys”，然后点“Add SSH Key”，填上任意的Title，在Key文本框里粘贴id_rsa.pub文件的内容，最后点“Add Key”，就可以看到已经添加的密钥</p><p>9.验证</p><p>点“Add Key”之后还可以用<code>$ ssh git@github.com</code>验证有没有添加成功</p><h3 id="重新和github仓库建立连接"><a href="#重新和github仓库建立连接" class="headerlink" title="重新和github仓库建立连接"></a>重新和github仓库建立连接</h3><p>1.重新生成密钥（和上文相同</p><p>2.新建一个文件夹，在这个新文件夹下新建一个git本地仓库，将终端在这个文件夹的路径下打开，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>3.设置用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>4.设置你想要建立对应连接的远程仓库地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:XXXXXXX/xxxxxxx.git</span><br></pre></td></tr></table></figure><p><strong>这里的地址填写github仓库的SSH地址</strong></p><p>5.把远程仓库的源代码拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>接下来有一系列信息，可以直接回车</p><p>在提示【The authenticity of host ‘github.com (192.30.253.112)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)?】</p><p>这一步骤的时候，不要直接敲回车，直接输入yes，不然会报错<br>6.建立本地分支和远程分支的追踪关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master</span><br></pre></td></tr></table></figure><p>到这一步，本地仓库重新与github远程仓库建立了连接</p><p>再次执行git pull,出现up to date就没问题了</p><p>参考文献：</p><p>1.<a href="https://www.jianshu.com/p/beb8d611340a" target="_blank" rel="noopener">Hexo博客从一台电脑迁移到其他电脑</a></p><p>2.<a href="https://blog.csdn.net/mzm2438975656/article/details/52523163" target="_blank" rel="noopener">Git配置SSH,并Push到GitHub上的相关流程</a></p><p>3.<a href="https://www.jianshu.com/p/a0a00965bac9" target="_blank" rel="noopener">换了电脑或者重装了系统后如何重新和github仓库建立连接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;换电脑所导致的一些麻烦事&quot;&gt;&lt;a href=&quot;#换电脑所导致的一些麻烦事&quot; class=&quot;headerlink&quot; title=&quot;换电脑所导致的一些麻烦事&quot;&gt;&lt;/a&gt;换电脑所导致的一些麻烦事&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;上一台电脑出现了较大的故障，把它修好的花销还不如直接换一台划算，于是我就入了新机，但麻烦也随之而来。新电脑虽然香，但是环境都得重新装过，还有一些事情想分享给大家。大家以后换电脑的时候应该能对你们有所帮助。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于React Router的分享</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/23/%E5%85%B3%E4%BA%8EReact%20Router%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/23/%E5%85%B3%E4%BA%8EReact%20Router%E7%9A%84%E5%88%86%E4%BA%AB/</id>
    <published>2020-05-22T16:33:49.000Z</published>
    <updated>2020-07-11T09:14:11.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享：-一些关于React-Router的知识"><a href="#分享：-一些关于React-Router的知识" class="headerlink" title="分享： 一些关于React Router的知识"></a>分享： 一些关于React Router的知识</h2><p>这段时间一直在用react写miniproject，所以小小归纳一下路由和有关方面的知识</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>React Router是一个基于React之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与URL间的同步。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>当我们安装好React App和所需环境并创建一个新项目后，cd进入此项目，然后按条件选择输入以下的一条代码，完成安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom</span><br><span class="line">yarn add react-router</span><br></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>路由配置是一组指令，用来告诉router如何匹配URL以及匹配后如何执行代码。</p><p>下面是在miniproject中运用React Router的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//先导入react和相关组件(之后总结</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">    BrowserRouter as Router,</span><br><span class="line">    Route,</span><br><span class="line">    Switch,</span><br><span class="line">    Redirect</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">//再导入相关的页面组件</span><br><span class="line">import HomePage from &quot;./pages/homepage/HomePage&quot;;</span><br><span class="line">import Search from &quot;./pages/search/search&quot;;</span><br><span class="line">...</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  //最后配置要匹配的URL</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">        &lt;Redirect exact from=&quot;/&quot; to=&quot;/homepage&quot; /&gt; </span><br><span class="line">        &lt;Route path=&quot;/homepage&quot; component=&#123;HomePage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/sort&quot; component=&#123;Sort&#125; /&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//然后在相应的页面组件中就可以进行运用</span><br><span class="line">//如导入Link组件</span><br><span class="line">import &#123;Link&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">...</span><br><span class="line">//并在render函数中渲染</span><br><span class="line">&lt;Link to=&#123;&quot;/sort&quot;&#125;&gt;</span><br><span class="line">    &lt;div className=&quot;top-words&quot;&gt;分类&lt;/div&gt;</span><br><span class="line">&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>通过上面的配置，应用的渲染方式为：</p><table><thead><tr><th align="center">URL</th><th align="center">组件</th></tr></thead><tbody><tr><td align="center">/</td><td align="center">Homepage</td></tr><tr><td align="center">/sort</td><td align="center">Homepage -&gt; Sort</td></tr></tbody></table><h3 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h3><p>路由组件可能是React Router中最需要理解和学习使用的组件。它最基本的职责是在路径与当前URL匹配时呈现一些UI。如下例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/homepage&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>由path-to-regexp可以理解的任何有效URL路径或路径数组。<strong>注意</strong>：没有路径始终匹配的路由</p><p>路径可分为四种模式。</p><ol><li><p>确切模式路径</p><p>仅当路径与其路径名称的位置(location.pathname) <em>完全</em>匹配时才匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=&quot;/one&quot;&gt;</span><br><span class="line">  &lt;About /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure></li><li><p>严格模式路径</p><p>带有斜杠的路径只会与带有斜杠的路径名称的位置（location.pathname）匹配。当路径名称的位置（location.pathname）中有其他网址分段时，此功能无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route strict path=&quot;/one/&quot;&gt;</span><br><span class="line">  &lt;About /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：严格路径可以用来执行一个结尾没有斜线的路径名称的位置，但为了做到这一点，<code>strict</code>和<code>exact</code>必须都满足。</p></li><li><p>敏感模式路径</p><p>如果路径区别大小写则匹</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route sensitive path=<span class="string">"/one"</span>&gt;</span><br><span class="line">  &lt;About /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：其它一些组件同样有这三种区别，如<code>&lt;Redirect&gt;</code></p></li></ol><h3 id="重定向组件"><a href="#重定向组件" class="headerlink" title="重定向组件"></a>重定向组件</h3><p>1.渲染<code>&lt;Redirect&gt;</code>会导航到新位置。新位置将覆盖历史记录堆栈中的当前位置，就像服务器端重定向（HTTP 3xx）一样。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect exact from=&quot;/&quot; to=&quot;/homepage&quot; /&gt;</span><br></pre></td></tr></table></figure><p>2.<code>to</code>中可以写重定向到的URL或位置。<strong>注意</strong>：所有在<code>to</code>中使用的URL参数必须被<code>from</code>中的覆盖。</p><p>3.<code>push</code>正确运用时，重定向会将新条目推入历史记录，而不是替换当前条目。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect push to=&quot;/somewhere/else&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="Switch组件"><a href="#Switch组件" class="headerlink" title="Switch组件"></a>Switch组件</h3><p>与一堆<strong><code>&lt;Route&gt;</code>s</strong>相比，它的独特之处在于它专门渲染了一条路线。而在一堆<strong><code>&lt;Route&gt;</code>s中</strong>，每个与位置匹配的<strong><code>&lt;Route&gt;</code></strong>都<em>包含在渲染内</em>。例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Route, Switch &#125; from &quot;react-router&quot;;</span><br><span class="line"></span><br><span class="line">let routes = (</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">    &lt;Route /&gt; </span><br><span class="line">    &lt;Route /&gt;</span><br><span class="line">    &lt;Route /&gt;</span><br><span class="line">  &lt;/Switch&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>只渲染第一个与位置匹配的子路由组件或重定向组件。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>它是React Router仅有的两个主要依赖项之一（除了React本身），它提供了几种不同的实现来管理各种环境中JavaScript的会话历史。</p><p><code>history</code>对象插件的使用可通过如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install history --save</span><br><span class="line">import createHistory from &apos;history/createBrowserHistory&apos;</span><br></pre></td></tr></table></figure><p><code>history</code> 对象通常具有以下属性和方法：</p><ul><li><p><code>length</code> -（数字）历史记录堆栈中的条目数</p></li><li><p><code>action</code>- （字符串）当前动作（<code>PUSH</code>，<code>REPLACE</code>，或<code>POP</code>）</p></li><li><p><code>location</code></p><p>-（对象）当前位置。可能具有以下属性：</p><ul><li><code>pathname</code> -（字符串）URL的路径</li><li><code>search</code> -（字符串）URL查询字符串</li><li><code>hash</code> -（字符串）URL哈希片段</li><li><code>state</code>-（对象）特定位置的状态，例如通过<code>push(path, state)</code>在将该位置推入堆栈时所提供的状态。仅在浏览器和内存历史记录中可用。</li></ul></li><li><p><code>push(path, [state])</code> -（函数）将新条目推入历史记录堆栈</p></li><li><p><code>replace(path, [state])</code> -（函数）替换历史记录堆栈上的当前条目</p></li><li><p><code>go(n)</code>-（函数）通过<code>n</code>条目在历史记录堆栈中移动指针</p></li><li><p><code>goBack()</code> -（函数）等同于 <code>go(-1)</code>     如以下一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">class SrBack extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            history: require(&quot;history&quot;).createHashHistory,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goback = () =&gt; &#123;</span><br><span class="line">        this.state.history().goBack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;img src=&#123;back&#125; onClick=&#123;this.goback&#125; alt=&quot;backButton&quot; className=&quot;backButton&quot;/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>goForward()</code> -（函数）等同于 <code>go(1)</code></p></li><li><p><code>block(prompt)</code>-（函数）防止导航</p><p>待补…</p><p>参考文献： <a href="https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string" target="_blank" rel="noopener"> React Route</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分享：-一些关于React-Router的知识&quot;&gt;&lt;a href=&quot;#分享：-一些关于React-Router的知识&quot; class=&quot;headerlink&quot; title=&quot;分享： 一些关于React Router的知识&quot;&gt;&lt;/a&gt;分享： 一些关于React Router的知识&lt;/h2&gt;&lt;p&gt;这段时间一直在用react写miniproject，所以小小归纳一下路由和有关方面的知识&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="react" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>http总结分享</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/12/07/http%E6%80%BB%E7%BB%93%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/12/07/http%E6%80%BB%E7%BB%93%E5%88%86%E4%BA%AB/</id>
    <published>2019-12-07T10:57:22.000Z</published>
    <updated>2020-05-25T14:09:26.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-TP协议族"><a href="#TCP-TP协议族" class="headerlink" title="TCP/TP协议族"></a>TCP/TP协议族</h2><p>其实机器是很笨的，没有任何智商，想让机器之间通信，必须要有一套完整通信规则，包括如何到达通信目标，使用的传输类型，等等都需要一套规范，这一整套规范就是协议。TCP/IP协议就是其中的这么一套协议族。</p><a id="more"></a><h2 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h2><p>TCP/IP 协议族按层次分别分 为以下 4 层：应用层、传输层、网络层和数据链路层。处于不同层上的可以只考虑分派给自己的任务。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>决定了向用户提供应用服务时通信的活动。</p><p>具体协议有：HTTP，FTP（文件传输协议），DNS（域名系统，就是IP与域名互相转换）等。可见HTTP 协议处于该层。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</p><p>有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报 协议）。</p><h3 id="网络层（又名网络互连层）"><a href="#网络层（又名网络互连层）" class="headerlink" title="网络层（又名网络互连层）"></a>网络层（又名网络互连层）</h3><p>规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><h3 id="链路层（又名数据链路层，网络接口层）"><a href="#链路层（又名数据链路层，网络接口层）" class="headerlink" title="链路层（又名数据链路层，网络接口层）"></a>链路层（又名数据链路层，网络接口层）</h3><p>用来处理连接网络的硬件部分。</p><h2 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h2><p><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/1.png" alt="图片"></p><p>这是整个通信过程中数据流的走向。这种把数据信息包装起来的做法称为封装。</p><h2 id="重要的HTTP协议"><a href="#重要的HTTP协议" class="headerlink" title="重要的HTTP协议"></a>重要的HTTP协议</h2><p>HTTP协议一般是用户客户端和服务器之间的通信。</p><h3 id="负责传输的-IP-协议"><a href="#负责传输的-IP-协议" class="headerlink" title="负责传输的 IP 协议"></a>负责传输的 IP 协议</h3><p>IP（Internet Protocol）网际协议位于网络层。作用是把各种数据包传送给对方。。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址</p><p><strong>注意：不要把“IP”和“IP 地址”搞混，“IP”其实是一种协议的名称。</strong></p><h3 id="确保可靠性的-TCP-协议"><a href="#确保可靠性的-TCP-协议" class="headerlink" title="确保可靠性的 TCP 协议"></a>确保可靠性的 TCP 协议</h3><p>位于传输层。为了更容易传送大数据把数据分割，而且能够确认数据最终是否送达到对方。</p><h3 id="负责域名解析的-DNS-服务"><a href="#负责域名解析的-DNS-服务" class="headerlink" title="负责域名解析的 DNS 服务"></a>负责域名解析的 DNS 服务</h3><p>位于应用层的协议。提供通过域名 查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p><h2 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h2><p>URL（Uniform Resource Locator，统一资源定位符）是使用Web浏览器等访问 We 页面时需要输入的网页地址。</p><p>URI（Uniform Resource Identifier，统一资源标识符）是由某个协议方案表示的资源的定位标识符。协议 方案是指访问资源所使用的协议类型名称。</p><p>URI 用字符串<strong>标识</strong>某一互联网资源，而 URL 表示资源的<strong>地点</strong>（互联 网上所处的位置）。可见 URL 是 URI 的子集。 </p><p>表示指定的 URI，要使用涵盖全部必要信息的绝对 URI、绝对 URL 以 及相对 URL。</p><p>绝对 URI 的格式：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/2.png" alt></p><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><p>用于HTTP协议交互的信息被称为 HTTP 报文。请求必定由客户端发出，而服务器端回复响应。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。<br>请求报文的结构：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/5.png" alt><br>实例:<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/3.png" alt><br>响应报文的结构：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/6.png" alt><br>实例：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/4.png" alt></p><h2 id="HTTP是无状态的协议"><a href="#HTTP是无状态的协议" class="headerlink" title="HTTP是无状态的协议"></a>HTTP是无状态的协议</h2><p>HTTP 是一种不保存状态，即无状态协议。为了更快地处理大量事务，确保协议的可伸缩性，自身不具备保存之前发送过的请求或响应的功能。（但有了Cookie再用 HTTP协议通信，就可以管理状态。）</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>GET：一般是获取资源。</p><p>POST：一般是传输实体主题，主要目的是将信息告诉服务器。</p><p>HEAD：获取报文的首部，一般不返回报文主题，确认资源URI是否有效 </p><p>OPTIONS：查询针对请求URI指定的资源支持的方法。 </p><p>PUT：：传输文件。一般不使用。</p><p>DELETE : 删除资源，一般很少用。</p><p>CONNECT：要求用隧道协议连接代理 。</p><h2 id="返回结果的HTTP状态码"><a href="#返回结果的HTTP状态码" class="headerlink" title="返回结果的HTTP状态码"></a>返回结果的HTTP状态码</h2><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结 果。借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。以3位数字和原因短语组成。数字中的第一位指定了响应类别后两位无分类。响应类别有以下 5 种。</p><p><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/7.png" alt></p><p>其中200 OK：表示请求成功，服务器也成功返回响应</p><p>204 No Content :服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体</p><p>206 Partial Content :表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求</p><p>301 Moved Permanently：永久重定向，浏览器会记下来，下次访问会直接发请求到被重定向的新位置</p><p>302 Found：临时重定向，只是这一次的请求被重定向了，下次还是会将请求，发送到旧的位置上</p><p>303 See Other:表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</p><p>304 Not Modified：缓存重定向，表示缓存的内容没被改变，浏览器可以直接使用缓存</p><p>307 Temporary Redirect 临时重定向:该状态码与 302 Found 有着相同的含义。</p><p>400 Bad Request: 该状态码表示请求报文中存在语法错误</p><p>401  Unauthorized：表示未授权，需要做用户验证</p><p>403 Forbidden：表示用户被禁止访问</p><p>404 Not Found：表示用户请求的资源找不到</p><p>500  Internal Server Error：服务器处理请求过程中发生了错误</p><p>503  Service Unavailable：服务器暂时无法使用，可能是因为停机维护或者服务器超载</p><h2 id="通信数据转发程序-：代理、网关、隧道"><a href="#通信数据转发程序-：代理、网关、隧道" class="headerlink" title="通信数据转发程序 ：代理、网关、隧道"></a>通信数据转发程序 ：代理、网关、隧道</h2><p>HTTP 通信时，除客户端和服务器以外，还有一些用于通信数据转发的应用程序，例如代理、网关和隧道。它们可以配合服务器工作。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。由代理服务器执行这个基本行为。持有资源实体的服务器被称为源服务器。每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息。</p><p><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/8.png" alt></p><p>代理分为缓存代理和透明代理。前者会预先将资源的副本（缓存）保存在代理服务器上。接到相同请求时可直接将缓存作为响应返回。后者不对报文做任何加工。</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>能使通信线路上的服务器提供非 HTTP 协议服务。且能提高通信的安全性，因为可以在客户端与网关之间的通信 线路上加密以确保连接的安全。</p><h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路。目的是确保客户端能与服务器进行安全的通信。本身不会去解析 HTTP 请求，与通信一起开始与结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-TP协议族&quot;&gt;&lt;a href=&quot;#TCP-TP协议族&quot; class=&quot;headerlink&quot; title=&quot;TCP/TP协议族&quot;&gt;&lt;/a&gt;TCP/TP协议族&lt;/h2&gt;&lt;p&gt;其实机器是很笨的，没有任何智商，想让机器之间通信，必须要有一套完整通信规则，包括如何到达通信目标，使用的传输类型，等等都需要一套规范，这一整套规范就是协议。TCP/IP协议就是其中的这么一套协议族。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="http" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>消除间隙的分享</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/08/%E6%B6%88%E9%99%A4%E9%97%B4%E9%9A%99%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/08/%E6%B6%88%E9%99%A4%E9%97%B4%E9%9A%99%E7%9A%84%E5%88%86%E4%BA%AB/</id>
    <published>2019-11-07T16:48:38.000Z</published>
    <updated>2020-07-11T09:14:03.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题：采用inline-block布局时会出现div之间有间隙的情况"><a href="#问题：采用inline-block布局时会出现div之间有间隙的情况" class="headerlink" title="问题：采用inline-block布局时会出现div之间有间隙的情况"></a>问题：采用inline-block布局时会出现div之间有间隙的情况</h1><p>如以下图片所示<br><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/exm.png" alt="实例"></p><p>这是它的css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.searchborder</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">3px</span> <span class="number">#F44336</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.searchlogo</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>它的html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="消除间隙的方法"><a href="#消除间隙的方法" class="headerlink" title="消除间隙的方法"></a>消除间隙的方法</h1><ol><li>font-size法</li><li>移除空格法</li><li>margin负值法</li><li>无闭合标签法</li><li>letter-spacing法</li><li>Word-spacing法</li></ol><h2 id="font-size法"><a href="#font-size法" class="headerlink" title="font-size法"></a>font-size法</h2><p>我们可以通过对父元素使用 <code>font-size:0</code>  实现消除间隙。<br>如以下代码所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图为<br><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/exm2.png" alt="实例"></p><h2 id="移除空格法"><a href="#移除空格法" class="headerlink" title="移除空格法"></a>移除空格法</h2><p>元素间留白间距出现的原因就是标签段之间的空格，因此，<strong>去掉HTML中的空格</strong>，自然间距就没了。考虑到代码可读性，显然连成一行的写法是不可取的，我们可以这么写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者这么写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者借助HTML注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等。可实现理想效果。</p><h2 id="margin负值法"><a href="#margin负值法" class="headerlink" title="margin负值法"></a>margin负值法</h2><p>我们可以通过<strong>修改元素的左右margin</strong>，使其成为<strong>负值</strong>，从而实现间隙的消除，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：margin负值的大小并不确定，与上下文的字体和文字大小相关，需自己调试到理想效果。<br>由于外部环境的不确定性，以及最后一个元素多出的父margin值等问题，这个方法不适合大规模使用。</p><h2 id="无闭合标签法"><a href="#无闭合标签法" class="headerlink" title="无闭合标签法"></a>无闭合标签法</h2><p>我们可以通过去除子元素的闭合标签来实现效果，由于我的例子并非单纯的div，img与input无闭合标签，下面采用其他例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>考虑到IE6/IE7浏览器的兼容性，最后一个列表的标签的结束（闭合）标签不能丢。<br>在HTML5中，我们可以直接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="letter-spacing法"><a href="#letter-spacing法" class="headerlink" title="letter-spacing法"></a>letter-spacing法</h2><p>我们可以通过给父元素设置letter-spacing的负值从而来消除间隙。<br>如以下代码所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此方法与margin负值法一样需根据实际情况调整负值的大小。负值小到理想值时再变小也不会有变化。</p><h2 id="Word-spacing法"><a href="#Word-spacing法" class="headerlink" title="Word-spacing法"></a>Word-spacing法</h2><p>我们可以通过给父元素设置Word-spacing的负值来消除间隙。<br>如以下代码所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此方法与上一种方法也大同小异，也需自行调整。负值小到理想值时再变小也不会有变化。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前我只找到了以上几种方法，仍待补充。<br>总的来说，移除空格和无闭合标签法较不为推荐，改变格式后容易出错，其它几种都比较方便。<br>参考文献  <a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">《去除inline-block元素间间距的N种方法》By赵鑫旭</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题：采用inline-block布局时会出现div之间有间隙的情况&quot;&gt;&lt;a href=&quot;#问题：采用inline-block布局时会出现div之间有间隙的情况&quot; class=&quot;headerlink&quot; title=&quot;问题：采用inline-block布局时会出现div之间有间隙的情况&quot;&gt;&lt;/a&gt;问题：采用inline-block布局时会出现div之间有间隙的情况&lt;/h1&gt;&lt;p&gt;如以下图片所示&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/exm.png&quot; alt=&quot;实例&quot;&gt;&lt;/p&gt;&lt;p&gt;这是它的css&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.search&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: bottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.searchborder&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: solid &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;#F44336&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;250px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: bottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.searchlogo&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: bottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.inline-block&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="html-css" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/03/hello-world/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/03/hello-world/</id>
    <published>2019-11-02T16:31:30.000Z</published>
    <updated>2020-05-25T14:09:28.534Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
