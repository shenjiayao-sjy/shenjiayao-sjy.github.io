<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YY’s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/"/>
  <updated>2020-08-02T09:25:17.829Z</updated>
  <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/</id>
  
  <author>
    <name>shenjiaoyao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>summer share 2.0</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/08/01/%E6%9A%91%E5%81%87%E5%88%86%E4%BA%AB(%E4%BA%8C)/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/08/01/%E6%9A%91%E5%81%87%E5%88%86%E4%BA%AB(%E4%BA%8C)/</id>
    <published>2020-08-01T14:18:05.000Z</published>
    <updated>2020-08-02T09:25:17.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="暑假分享之prototype与-proto"><a href="#暑假分享之prototype与-proto" class="headerlink" title="暑假分享之prototype与__proto__"></a>暑假分享之<code>prototype</code>与<code>__proto__</code></h2><blockquote><p>前面我提到了new操作符，其中用new 做到函数的构造调用后，js会帮我们创建一个新对象，然后把这个新对象的<code>__proto__</code>属性指向原函数的<code>prototype</code>属性(即继承原函数的原型)。接下来，我将详细区别一下<code>prototype</code>与<code>__proto__</code>。</p></blockquote><a id="more"></a><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;...&#125;;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> foo();</span><br></pre></td></tr></table></figure><p>以上代码表示创建一个构造函数<code>foo()</code>，并用<code>new</code>关键字实例化该构造函数得到一个实例化对象<code>f</code>。</p><h3 id="2-proto-属性"><a href="#2-proto-属性" class="headerlink" title="2. __proto__属性"></a>2. <code>__proto__</code>属性</h3><h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>对象<code>f</code>具有属性<code>__proto__</code>，可称为隐式原型，一个对象的隐式原型指向构造自身的构造函数的原型，即<code>foo.prototype</code>。这prototype是一个普通的对象。</p><h4 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2.2 作用"></a>2.2 作用</h4><p><code>__proto__</code>是<strong>对象所独有的</strong>，由<strong>一个对象指向一个对象</strong>。它的<strong>作用</strong>就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<code>__proto__</code>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找…直到原型链顶端<strong>null</strong>，再往上找就相当于在null上取值，会报错，<code>null</code>为原型链的终点，由以上这种通过<code>__proto__</code>属性来连接对象直到<code>null</code>的一条链即为我们所谓的<strong>原型链</strong>。</p><h3 id="3-prototype属性"><a href="#3-prototype属性" class="headerlink" title="3. prototype属性"></a>3. prototype属性</h3><h4 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h4><p>函数<code>foo</code>具有<code>prototype</code>属性。<code>prototype</code>称为该函数的原型对象，也就是这个函数所创建的实例的原型对象。因此：<code>f.__proto__ === foo.prototype</code>，它们两个完全一样。</p><h4 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h4><p><code>prototype</code>是函数才会有的属性，由<strong>一个函数指向一个对象</strong>。它的<strong>作用</strong>就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。<strong>任何函数在创建的时候，都会默认创建该函数的prototype对象。</strong></p><h3 id="4-constructor属性"><a href="#4-constructor属性" class="headerlink" title="4. constructor属性"></a>4. constructor属性</h3><h4 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h4><p>对象<code>f</code>具有<code>constructor</code>属性,含义就是<strong>指向该对象的构造函数</strong>。</p><p><code>constructor</code>属性也是<strong>对象才拥有的</strong>，它是从<strong>一个对象指向一个函数</strong>。<strong>Function</strong>这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由Function构造函数得来，所以<code>constructor</code>属性的终点就是<strong>Function</strong>这个函数。</p><h3 id="5-注意点"><a href="#5-注意点" class="headerlink" title="5. 注意点"></a>5. 注意点</h3><ol><li><code>__proto__</code>和<code>constructor</code>属性是<strong>对象</strong>所独有的； <code>prototype</code>属性是<strong>函数</strong>所独有的，因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性。</li><li>Javascript中所有的对象都是Object的实例(声明一个函数的时候也就是相当于对Object的实例化)，并继承Object.prototype的属性和方法，也就是说，Object.prototype是所有对象的父对象。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;暑假分享之prototype与-proto&quot;&gt;&lt;a href=&quot;#暑假分享之prototype与-proto&quot; class=&quot;headerlink&quot; title=&quot;暑假分享之prototype与__proto__&quot;&gt;&lt;/a&gt;暑假分享之&lt;code&gt;prototype&lt;/code&gt;与&lt;code&gt;__proto__&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前面我提到了new操作符，其中用new 做到函数的构造调用后，js会帮我们创建一个新对象，然后把这个新对象的&lt;code&gt;__proto__&lt;/code&gt;属性指向原函数的&lt;code&gt;prototype&lt;/code&gt;属性(即继承原函数的原型)。接下来，我将详细区别一下&lt;code&gt;prototype&lt;/code&gt;与&lt;code&gt;__proto__&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>summer share 1.0</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/08/01/%E6%9A%91%E5%81%87%E5%88%86%E4%BA%AB(%E4%B8%80)/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/08/01/%E6%9A%91%E5%81%87%E5%88%86%E4%BA%AB(%E4%B8%80)/</id>
    <published>2020-08-01T12:50:19.000Z</published>
    <updated>2020-08-02T09:25:04.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="暑假分享之前端this指向总结"><a href="#暑假分享之前端this指向总结" class="headerlink" title="暑假分享之前端this指向总结"></a>暑假分享之前端this指向总结</h2><blockquote><p>使用JavaScript开发的时候，很多开发者会被this 的指向弄懵。关键是要记住最核心的一句话：哪个对象调用函数，函数里面的this指向哪个对象。</p></blockquote><a id="more"></a><h3 id="1-this是什么"><a href="#1-this是什么" class="headerlink" title="1. this是什么"></a>1. this是什么</h3><p>this既不指向函数自身，也不指函数的词法作用域。它实际是在函数被调用时才发生的绑定，也就是说this指向什么，完全取决于什么地方以什么方式调用,而不是创建时。</p><h3 id="2-this的绑定方法"><a href="#2-this的绑定方法" class="headerlink" title="2. this的绑定方法"></a>2. this的绑定方法</h3><p>this的4种绑定规则分别是：默认绑定、隐式绑定、显示绑定、new 绑定。优先级从低到高。</p><h4 id="2-1-默认绑定"><a href="#2-1-默认绑定" class="headerlink" title="2.1 默认绑定"></a>2.1 默认绑定</h4><p>什么叫默认绑定，即没有其他绑定规则存在时的默认规则。这也是函数调用中最常用的规则。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>我们可以看到函数foo是直接调用的，而像<strong>这种直接使用而不带任何修饰的函数调用</strong>，就默认且只能应用默认绑定，一般是绑定在window上。</p><p><strong>注意：</strong>在严格模式下，全局对象将无法使用默认绑定，即执行会报undefined的错误。</p><h4 id="2-2-隐式绑定"><a href="#2-2-隐式绑定" class="headerlink" title="2.2 隐式绑定"></a>2.2 隐式绑定</h4><h5 id="2-2-1-例子"><a href="#2-2-1-例子" class="headerlink" title="2.2.1 例子"></a>2.2.1 例子</h5><p>除了直接对函数进行调用外，有些情况是，函数的调用是在某个对象上触发的，即调用位置上存在上下文对象。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">10</span>,</span><br><span class="line">    foo : foo</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">obj.foo(); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>其中<code>foo()</code>就等于上文的默认绑定，等价于<code>window.a</code>，顾输出5；而下面的情况，函数foo执行的时候有了上下文对象<code>obj</code>。此时，函数里的this默认绑定为上下文对象，等价于<code>obj.a</code>,故输出10 。</p><h5 id="2-2-2-多层调用链"><a href="#2-2-2-多层调用链" class="headerlink" title="2.2.2 多层调用链"></a>2.2.2 多层调用链</h5><p>如果遇到多层调用链，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; </span><br><span class="line">    a: <span class="number">7</span>,</span><br><span class="line">    foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; </span><br><span class="line">    a: <span class="number">8</span>,</span><br><span class="line">    obj1: obj1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj2.obj1.foo();  <span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>这里的调用链不只一层，存在obj1、obj2两个对象。原则是获取最后一层调用的上下文对象，即obj1，所以结果是7（obj1.a）。</p><p><strong>总结：</strong>链性关系在上下文取函数的直接上级，即紧挨着函数的那个，或者说是对象链的最后一个。</p><h5 id="2-2-3-隐式丢失"><a href="#2-2-3-隐式丢失" class="headerlink" title="2.2.3 隐式丢失"></a>2.2.3 隐式丢失</h5><p>这里存在一个陷阱，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    foo: foo </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo;</span><br><span class="line">bar(); <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>为什么obj.foo 赋值给bar，调用<code>bar()</code>使用的是默认绑定呢？</p><p>这里有个概念要理解清楚，obj.foo 是引用属性，赋值给bar的实际上就是foo函数（即：bar指向foo本身）。</p><p>那么，实际的调用关系是：通过bar找到foo函数，进行调用。整个调用过程并没有obj的参数，所以是默认绑定。</p><h4 id="2-3-显示绑定"><a href="#2-3-显示绑定" class="headerlink" title="2.3 显示绑定"></a>2.3 显示绑定</h4><h5 id="2-3-1-call-apply-bind"><a href="#2-3-1-call-apply-bind" class="headerlink" title="2.3.1 call apply bind"></a>2.3.1 call apply bind</h5><p>隐性绑定中有一个致命的限制，就是上下文必须包含函数 ，例：<code>var obj = { foo : foo }</code>,如果上下文不包含函数用隐性绑定显然要出错，因此下面介绍直接<strong>给函数强制性绑定this</strong>的显式绑定。</p><p>显示绑定可以通过js给我们提供的函数call(…)或apply(…)来实现（大多数函数及自己创建的函数默认都提供这两个方法）。</p><p><strong>它们的作用都是改变函数的this指向</strong>，<strong>第一个参数都是设置this对象</strong>。</p><p>两个函数的区别：</p><ol><li>call接收的参数不固定，第二个参数开始都是依次传入的参数。</li><li>apply接收两个参数，第二个参数必须是一个集合对象（数组或者类数组）</li></ol><p>此时在遇到多个对象情况下，可以直接申明要绑定的对象，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; </span><br><span class="line">    a: <span class="number">7</span> <span class="comment">//去掉foo</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; </span><br><span class="line">    a: <span class="number">8</span></span><br><span class="line">&#125;;</span><br><span class="line">foo.call( obj1 ); <span class="comment">// 7</span></span><br><span class="line">foo.call( obj2 ); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p><code>this</code>直接被绑定在了obj上。</p><p>除了 call，apply函数以外，还有一个改变this的函数 bind ，它和call,apply都不同。</p><p><strong>bind只有一个函数，且不会立刻执行，只是将一个值绑定到函数的this上,并将绑定好的函数返回</strong>。例:    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span> : <span class="number">10</span> &#125;; <span class="comment">//将obj绑定到函数的this上</span></span><br><span class="line"></span><br><span class="line">foo = foo.bind(obj);</span><br><span class="line">foo(); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-硬绑定"><a href="#2-3-2-硬绑定" class="headerlink" title="2.3.2 硬绑定"></a>2.3.2 硬绑定</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; </span><br><span class="line">    a: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; </span><br><span class="line">    a: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo.call( obj1 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">bar.call( obj2 ); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>虽然bar被显示绑定到obj2上，但foo因为通过<code>foo.call( obj1 )</code>已经显示绑定了obj1，所以在foo函数内，this指向的是obj1，不会因为bar函数内指向obj2而改变自身。</p><h4 id="2-4-new-绑定"><a href="#2-4-new-绑定" class="headerlink" title="2.4 new 绑定"></a>2.4 new 绑定</h4><h5 id="2-4-1-什么是new"><a href="#2-4-1-什么是new" class="headerlink" title="2.4.1 什么是new"></a>2.4.1 什么是new</h5><p>js中的new操作符，和传统的面向对象的语言中的new的作用都是创建一个新的对象，但它们的机制不一样。</p><p>传统的面向对象构造函数是类里的一种特殊函数，要创建对象时使用<code>new 类名()</code>的形式去调用类中的构造函数，而js中只要用new修饰的函数就是<strong>‘构造函数’</strong>，准确来说是 <strong>函数的构造调用</strong>，因为在js中并不存在所谓的’构造函数’。</p><p>使用new来调用函数，会自动将创造的新对象绑定到 此函数的this上 。如果这个函数没有返回其他对象，就返回新对象。</p><h5 id="2-4-2-例子"><a href="#2-4-2-例子" class="headerlink" title="2.4.2 例子"></a>2.4.2 例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();      <span class="comment">// foo&#123; a : 10 &#125;  创建的新对象的默认名为函数名</span></span><br><span class="line">                          <span class="comment">// 然后等价于 foo &#123; a : 10 &#125;;  var obj = foo;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);       <span class="comment">// 10    new绑定</span></span><br></pre></td></tr></table></figure><p>使用new调用函数后，函数会以自己的名字命名和创建一个新的对象并返回。</p><p>特别注意 : 如果原函数返回一个对象类型，那么将无法返回新对象,你将丢失绑定this的新对象，例:                        </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"js"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);       <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);         <span class="comment">// "js"</span></span><br></pre></td></tr></table></figure><h3 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3. 箭头函数"></a>3. 箭头函数</h3><p>通过“=&gt;”而不是function创建的函数，叫做箭头函数。</p><p>它和普通函数的区别：</p><ol><li>箭头函数不使用我们上面介绍的四种绑定，而是<strong>完全根据外部(函数或全局)作用域来决定this</strong>。(它的父级是使用上述规则的)</li><li>箭头函数的this绑定无法被修改</li></ol><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj= &#123;</span><br><span class="line">    that : <span class="keyword">this</span>, <span class="comment">//默认绑定</span></span><br><span class="line">    bar : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    baz : <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.that);  <span class="comment">// window</span></span><br><span class="line">obj.bar()();            <span class="comment">// obj</span></span><br><span class="line">obj.baz();              <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>其中obj当前的作用域是window，第一个this就是默认绑定到window，而用function包裹第一个箭头函数的目的就是为了将箭头函数绑定到当前的对象上，否则像第二个箭头函数默认绑定的父级作用域就是window。</p><h3 id="4-总结图"><a href="#4-总结图" class="headerlink" title="4. 总结图"></a>4. 总结图</h3><p><img src="/shenjiayao-sjy/shenjiayao.github.io/2020/08/01/%E6%9A%91%E5%81%87%E5%88%86%E4%BA%AB(%E4%B8%80)/shenjiayao/Desktop/shenjiayao-sjy.github.io/source/_posts/%E6%9A%91%E5%81%87%E5%88%86%E4%BA%AB(%E4%B8%80)/this%E8%A1%A8.png" alt="this表"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;暑假分享之前端this指向总结&quot;&gt;&lt;a href=&quot;#暑假分享之前端this指向总结&quot; class=&quot;headerlink&quot; title=&quot;暑假分享之前端this指向总结&quot;&gt;&lt;/a&gt;暑假分享之前端this指向总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用JavaScript开发的时候，很多开发者会被this 的指向弄懵。关键是要记住最核心的一句话：哪个对象调用函数，函数里面的this指向哪个对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>读impatient-js的笔记和总结</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/07/15/%E8%AF%BBimpatient-js%E7%9A%84%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/07/15/%E8%AF%BBimpatient-js%E7%9A%84%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-15T02:45:24.000Z</published>
    <updated>2020-08-01T17:07:08.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>暑假学习了《Javascript for impatient programmers》，为了能够深刻和全面地理解这本书的内容，我就想自己好好总结一下。</p></blockquote><a id="more"></a><h3 id="第六章-语法-Syntax"><a href="#第六章-语法-Syntax" class="headerlink" title="第六章 语法(Syntax)"></a>第六章 语法(Syntax)</h3><h4 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h4><h5 id="1-注释-comments"><a href="#1-注释-comments" class="headerlink" title="1.注释(comments)"></a>1.注释(comments)</h5><p>(i)  // 单个注释</p><p>(ii) /*</p><p>​     多行</p><p>​     注释</p><p>​     */</p><h5 id="2-布尔值-Booleans"><a href="#2-布尔值-Booleans" class="headerlink" title="2.布尔值(Booleans)"></a>2.布尔值(Booleans)</h5><p>创建 Boolean 对象的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(value);    <span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">Boolean</span>(value);        <span class="comment">//转换函数</span></span><br></pre></td></tr></table></figure><p>当作为一个构造函数（带有运算符 new）调用时，Boolean() 将把它的参数转换成一个布尔值，并且返回一个包含该值的 Boolean 对象。</p><p>如果作为一个函数（不带有运算符 new）调用时，Boolean() 只将把它的参数转换成一个原始的布尔值，并且返回这个值。</p><p><strong>注释：</strong>如果省略 value 参数，或者设置为 0、-0、null、””、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 “false”）。</p><h5 id="3-命名约定"><a href="#3-命名约定" class="headerlink" title="3.命名约定"></a>3.命名约定</h5><p>串联单词的常见大小写样式为：骆驼、下划线（也称为蛇）、破折号（也称为烤肉串）</p><p>通常，JavaScript使用驼峰式大小写，常量除外。</p><p>小写：</p><ul><li>函数，变量： <code>myFunction</code></li><li>方法： <code>obj.myMethod</code></li><li>CSS：<ul><li>CSS实体： <code>special-class</code></li><li>对应的JavaScript变量： <code>specialClass</code></li></ul></li></ul><p>大写：</p><ul><li><p>类： <code>MyClass</code></p></li><li><p>常数： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MY_CONSTANT</span><br></pre></td></tr></table></figure><ul><li>常量通常也以驼峰形式编写： <code>myConstant</code></li></ul></li></ul><p>更多：</p><p>如果参数名称以下划线开头（或为下划线），则表示未使用此参数-例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.map((_x, i) =&gt; i)</span><br></pre></td></tr></table></figure><p>如果对象的属性名称以下划线开头，则该属性被视为私有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueWrapper</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>._value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-标识符-identifiers"><a href="#6-2-标识符-identifiers" class="headerlink" title="6.2 标识符(identifiers)"></a>6.2 标识符(identifiers)</h4><h5 id="1-有效标识符-变量名等"><a href="#1-有效标识符-变量名等" class="headerlink" title="1.有效标识符(变量名等)"></a>1.有效标识符(变量名等)</h5><p>变量名称和属性名称的语法类别称为<strong>标识符</strong>。</p><p>第一个字符：</p><ul><li>Unicode字母（包括带重音符号的<code>é</code>和<code>ü</code>和非拉丁字母的字符，例如<code>α</code>）</li><li><code>$</code></li><li><code>_</code></li></ul><p>后续字符：</p><ul><li>合法的第一个字符</li><li>Unicode数字（包括东方阿拉伯数字）</li><li>其他一些Unicode标记和标点符号</li></ul><h5 id="2-保留字-reserved-words"><a href="#2-保留字-reserved-words" class="headerlink" title="2.保留字(reserved words)"></a>2.保留字(reserved words)</h5><p>保留字不能是变量名，但可以是属性名。</p><p>不应该使用全局变量的名字(<code>String</code>，<code>Math</code>)为自己的变量和参数等。</p><h4 id="6-3-语句-statement-与表达式-expression"><a href="#6-3-语句-statement-与表达式-expression" class="headerlink" title="6.3 语句(statement)与表达式(expression)"></a>6.3 语句(statement)与表达式(expression)</h4><h5 id="1-语句"><a href="#1-语句" class="headerlink" title="1.语句"></a>1.语句</h5><p>一个语句是一段可被执行的代码，并执行某种动作。例如if语句或函数声明等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twice</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-表达式"><a href="#2-表达式" class="headerlink" title="2.表达式"></a>2.表达式</h5><p>一个表达式是一段可被评估的代码，以产生一个值。</p><p>例如，括号之间的代码是一个表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let myStr = (myBool ? &apos;Yes&apos; : &apos;No&apos;);</span><br></pre></td></tr></table></figure><p><code>_?_:_</code>括号之间使用的运算符称为三元运算符。它是<code>if</code>语句的表达式版本。</p><h5 id="3-更多规范"><a href="#3-更多规范" class="headerlink" title="3.更多规范"></a>3.更多规范</h5><ul><li>函数的主体必须是一系列语句</li><li>函数调用或方法调用的参数必须为表达式</li><li>表达式可以用作语句，它们被称为表达式语句；反之则不成立</li></ul><h4 id="6-4-不明确的语法"><a href="#6-4-不明确的语法" class="headerlink" title="6.4 不明确的语法"></a>6.4 不明确的语法</h4><h5 id="1-函数声明和函数表达式"><a href="#1-函数声明和函数表达式" class="headerlink" title="1.函数声明和函数表达式"></a>1.函数声明和函数表达式</h5><p>一个函数声明为一个语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个函数表达式是一个表达式（=的右侧）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const id = function me(x) &#123;</span><br><span class="line">  return x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="2-对象字面量和块"><a href="#2-对象字面量和块" class="headerlink" title="2.对象字面量和块"></a>2.对象字面量和块</h5><p>在下面的代码中，<code>{}</code>是一个对象字面量：一个创建空对象的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>这是一个空的代码块（一条语句）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-消除分歧"><a href="#3-消除分歧" class="headerlink" title="3.消除分歧"></a>3.消除分歧</h5><p>为了解决歧义，以<code>function</code>或<code>{</code>开头的语句永远不会被解释为表达式。如果要让表达式语句以以下任一标记开头，则必须将其用括号括起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="built_in">console</span>.log(x) &#125;)(<span class="string">'abc'</span>);</span><br></pre></td></tr></table></figure><p>先通过函数表达式创建了一个函数，然后调用它</p><h4 id="6-5-分号-semicolons"><a href="#6-5-分号-semicolons" class="headerlink" title="6.5 分号(semicolons)"></a>6.5 分号(semicolons)</h4><h5 id="1-法则"><a href="#1-法则" class="headerlink" title="1.法则"></a>1.法则</h5><p>以大括号结尾的语句后面没有分号；如果有，则被解释为空语句。</p><h5 id="2-控制语句-control-statements"><a href="#2-控制语句-control-statements" class="headerlink" title="2.控制语句(control statements)"></a>2.控制语句(control statements)</h5><p>如while loop:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition)</span><br><span class="line">  statement</span><br></pre></td></tr></table></figure><p>控制语句的主体就是一个语句，它可以是单个的一条语句，但块也是语句，也可以作为控制语句的主体。</p><p>如果下次要一个空的主体，既可以是一个空的语句（只加一个分号），也可以是一个空的块。</p><h4 id="6-6-自动分号插入-ASI"><a href="#6-6-自动分号插入-ASI" class="headerlink" title="6.6 自动分号插入(ASI)"></a>6.6 自动分号插入(ASI)</h4><h5 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h5><p>ASI的工作原理如下。语句的解析将继续进行，直到出现以下任何一种情况：</p><ul><li>分号</li><li>行终止符后跟非法令牌</li></ul><p>换句话说，ASI可以看作是在换行符处插入分号。</p><h5 id="2-意外触发"><a href="#2-意外触发" class="headerlink" title="2.意外触发"></a>2.意外触发</h5><p>JavaScript禁止在某些令牌后换行。如果确实插入换行符，也会插入分号。</p><p>与实际最相关的令牌是<code>return</code>。例如，考虑以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br><span class="line">&#123;</span><br><span class="line">  first: <span class="string">'jane'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码被解析为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#123;</span><br><span class="line">  first: <span class="string">'jane'</span>;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>可以防止意外地返回一行中令牌<code>return</code>后的值。</p><h5 id="3-最佳做法"><a href="#3-最佳做法" class="headerlink" title="3.最佳做法"></a>3.最佳做法</h5><p>建议始终编写分号。</p><h4 id="6-7-严格模式-strict-与马虎-sloppy-模式"><a href="#6-7-严格模式-strict-与马虎-sloppy-模式" class="headerlink" title="6.7 严格模式(strict)与马虎(sloppy)模式"></a>6.7 严格模式(strict)与马虎(sloppy)模式</h4><p>脚本中的默认模式为普通的“马虎”模式（代码片段是模块的先驱，并受浏览器支持），而严格模式是模块和类中的默认模式，可以在脚本中打开。在此模式下，正常模式的一些陷阱被消除，并且引发了更多异常。</p><p>在现代JavaScript代码中，几乎不会遇到马虎模式，该模式几乎总是位于模块中。</p><h5 id="1-严格模式"><a href="#1-严格模式" class="headerlink" title="1.严格模式"></a>1.严格模式</h5><p>在脚本文件和CommonJS模块中，通过在第一行中放置以下代码，可以为完整文件打开严格模式(ECMAScript 5之前的版本会完全忽略它)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br></pre></td></tr></table></figure><p>还可以仅使用一个功能就打开严格模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionInStrictMode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-马虎模式的陷阱"><a href="#2-马虎模式的陷阱" class="headerlink" title="2.马虎模式的陷阱"></a>2.马虎模式的陷阱</h5><p>(i)改变未声明的变量将创造全局变量</p><p>(ii)函数声明在严格模式中是块作用域但在马虎模式中是函数作用域</p><p>在严格模式下，通过函数声明创建的变量仅存在于最里面的封闭块中</p><p>(iii)更改不可变数据时，草率模式不会引发异常</p><p>在严格模式下，如果尝试更改不可变数据，则会出现异常;而在草率模式下，分配静默失败</p><h3 id="第十章-变量和赋值-Variables-and-assignments"><a href="#第十章-变量和赋值-Variables-and-assignments" class="headerlink" title="第十章 变量和赋值(Variables and assignments)"></a>第十章 变量和赋值(Variables and assignments)</h3><h4 id="10-1-let"><a href="#10-1-let" class="headerlink" title="10.1 let"></a>10.1 let</h4><p>通过<code>let</code>声明的变量是可变的，而且可以同时声明和赋值</p><h4 id="10-2-const"><a href="#10-2-const" class="headerlink" title="10.2 const"></a>10.2 const</h4><p>通过<code>const</code>声明的变量是不变的，必须立即初始化</p><h5 id="1-const和不变"><a href="#1-const和不变" class="headerlink" title="1.const和不变"></a>1.const和不变</h5><p><code>const</code>仅表示绑定(变量名称和变量值之间的关联)是不可变的，该值本身可以是可变的，如改变其属性</p><h5 id="2-const和循环"><a href="#2-const和循环" class="headerlink" title="2.const和循环"></a>2.const和循环</h5><p>使用const和for-of循环，每个迭代都会创建新的绑定，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> elem <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 'hello'</span></span><br><span class="line"><span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure><p>但在普通的for循环中，必须使用<code>let</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> elem = arr[i];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-选择"><a href="#3-选择" class="headerlink" title="3. 选择"></a>3. 选择</h5><p>仅在不能使用<code>const</code>时用<code>let</code></p><h4 id="10-3-一个变量的作用域"><a href="#10-3-一个变量的作用域" class="headerlink" title="10.3 一个变量的作用域"></a>10.3 一个变量的作用域</h4><h5 id="1-法则-1"><a href="#1-法则-1" class="headerlink" title="1.法则"></a>1.法则</h5><p>变量的范围是程序可以访问的区域</p><p>通过<code>const</code>和<code>let</code>声明的变量被称为是块作用域的，因为它们的范围始终是周围的最内部块。</p><h5 id="2-阴影变量-Shadowing-variables"><a href="#2-阴影变量-Shadowing-variables" class="headerlink" title="2.阴影变量(Shadowing variables)"></a>2.阴影变量(Shadowing variables)</h5><p>不能在同一级别两次声明同一变量，但可以嵌套一个块，在块外声明相同的变量名；在块内部，内部<code>x</code>是唯一具有该名称的可访问变量，离开块后，可以再次访问旧值。</p><h4 id="10-4-术语-terminology-：静态-static-vs-动态-dynamic"><a href="#10-4-术语-terminology-：静态-static-vs-动态-dynamic" class="headerlink" title="10.4 术语(terminology)：静态(static) vs 动态(dynamic)"></a>10.4 术语(terminology)：静态(static) vs 动态(dynamic)</h4><ul><li><p><em>静态</em>意味着某些东西与源代码有关，无需执行代码即可确定。</p></li><li><p><em>动态</em>意味着在运行时。</p><h5 id="1-静态现象：变量的作用域"><a href="#1-静态现象：变量的作用域" class="headerlink" title="1.静态现象：变量的作用域"></a>1.静态现象：变量的作用域</h5><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x是静态范围，其范围是固定的，并且在运行时不会更改。</p><p>变量的范围形成了一棵静态数。（通过静态嵌套）</p><h5 id="2-动态现象：函数调用"><a href="#2-动态现象：函数调用" class="headerlink" title="2.动态现象：函数调用"></a>2.动态现象：函数调用</h5><p>函数是否被调用只能在运行时确定。</p><p>函数调用形成一棵动态树（通过动态调用）。</p></li></ul><h4 id="10-5-全局变量和全局对象"><a href="#10-5-全局变量和全局对象" class="headerlink" title="10.5 全局变量和全局对象"></a>10.5 全局变量和全局对象</h4><h5 id="1-法则-2"><a href="#1-法则-2" class="headerlink" title="1.法则"></a>1.法则</h5><p>JavaScript的变量范围是嵌套的。它们形成一棵树：</p><ul><li><p>最外部的作用域是树的根。</p></li><li><p>直接包含在该范围中的范围是根的子级。</p></li></ul><p>根也称为全局范围。在web浏览器中，一个直接位于该范围内的唯一位置是脚本的顶层。全局范围的变量称为全局变量，可在任何地方访问。</p><h5 id="2-种类"><a href="#2-种类" class="headerlink" title="2.种类"></a>2.种类</h5><p>全局变量有两种：</p><ul><li>全局<strong>声明</strong>变量是普通变量。<ul><li>只能在脚本的顶层通过<code>const</code>，<code>let</code>和<code>class</code>声明来创建它们。</li></ul></li><li><strong>全局对象变量存储在所谓的全局对象的属性中</strong><ul><li>它们通过<code>var</code>和函数声明在脚本的顶层创建。</li><li>可以通过全局变量<code>globalThis</code>访问全局对象。它可用于创建，读取和删除全局对象变量。</li><li>除此之外，全局对象变量的工作方式与普通变量类似。</li></ul></li></ul><p>每个ECMAScript模块都有自己的范围，该范围包含在全局范围内。因此，存在于模块顶层的变量不是全局变量。</p><h4 id="10-6-声明：范围-scope-和激活-activation"><a href="#10-6-声明：范围-scope-和激活-activation" class="headerlink" title="10.6 声明：范围(scope)和激活(activation)"></a>10.6 声明：范围(scope)和激活(activation)</h4><h5 id="1-声明的种类"><a href="#1-声明的种类" class="headerlink" title="1.声明的种类"></a>1.声明的种类</h5><ul><li>范围：指已声明的实体可以被看到的范围，是一个静态特征。</li><li>激活：指可以访问实体的时间，是一个动态特征。有些实体当我们进入它的范围时就可以直接被访问，而其它的必须等到执行到达它们的声明。</li></ul><table><thead><tr><th></th><th>Scope</th><th>Activation</th><th>Duplicates(同一作用域内重复)</th><th>Global prop.</th></tr></thead><tbody><tr><td><code>const</code></td><td>Block</td><td>decl. (TDZ)</td><td><code>✘</code></td><td><code>✘</code></td></tr><tr><td><code>let</code></td><td>Block</td><td>decl. (TDZ)</td><td><code>✘</code></td><td><code>✘</code></td></tr><tr><td><code>function</code></td><td>Block (*)</td><td>start</td><td><code>✔</code></td><td><code>✔</code></td></tr><tr><td><code>class</code></td><td>Block</td><td>decl. (TDZ)</td><td><code>✘</code></td><td><code>✘</code></td></tr><tr><td><code>import</code></td><td>Module</td><td>same as export</td><td><code>✘</code></td><td><code>✘</code></td></tr><tr><td><code>var</code></td><td>Function</td><td>start, partially</td><td><code>✔</code></td><td><code>✔</code></td></tr></tbody></table><h5 id="2-const-and-let-temporal-dead-zone"><a href="#2-const-and-let-temporal-dead-zone" class="headerlink" title="2.const and let: temporal dead zone"></a>2.const and let: temporal dead zone</h5><p>进入变量范围和执行变量声明之间的<em>时间</em>称为该变量的时间死区（TDZ）：</p><ul><li>在这段时间内，该变量被认为是未初始化的（好像它是一个特殊值）。</li><li>如果访问未初始化的变量，则会得到一个<code>ReferenceError</code>。</li><li>到达变量声明后，将变量设置为初始值设定项的值（通过分配符号指定）或<code>undefined</code>–如果没有初始值设定项。</li></ul><p>即使函数的声明位于变量的声明之前并使用该变量，我们也可以调用此函数。但是，我们必须等到变量的时间盲区结束。</p><h5 id="3-函数的声明和提前激活"><a href="#3-函数的声明和提前激活" class="headerlink" title="3.函数的声明和提前激活"></a>3.函数的声明和提前激活</h5><p>进入函数范围时，无论函数声明在该范围内的什么位置，总是先执行函数声明。这使我们可以在声明函数之前调用它，即提前激活函数。</p><p>如果通过<code>const</code>或<code>let</code>声明函数(表达式)，则不会提早激活它。</p><p>注意：值为字符的变量不会被提前激活，类的声明不会提前激活（*）</p><h5 id="4-var：部分提前激活"><a href="#4-var：部分提前激活" class="headerlink" title="4.var：部分提前激活"></a>4.var：部分提前激活</h5><p>以下代码演示了的效果<code>var</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Partial early activation:</span></span><br><span class="line">  assert.equal(x, <span class="literal">undefined</span>); <span class="comment">//与const和let不同</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">// The assignment is executed in place:</span></span><br><span class="line">    assert.equal(x, <span class="number">123</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Scope is function, not block:</span></span><br><span class="line">  assert.equal(x, <span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-7-闭包"><a href="#10-7-闭包" class="headerlink" title="10.7 闭包"></a>10.7 闭包</h4><p>一个闭包是指一个函数加上与存在于它的“出生地”的变量的连接，这种连接能提供函数中自由变量的值。</p><p>通过JavaScript中的闭包支持静态作用域。因此，每个函数都是一个闭包。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInc</span>(<span class="params">startValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">step</span>) =&gt;</span> &#123; <span class="comment">// (A)</span></span><br><span class="line">    startValue += step;</span><br><span class="line">    <span class="keyword">return</span> startValue;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> inc = createInc(<span class="number">5</span>);</span><br><span class="line">assert.equal(inc(<span class="number">2</span>), <span class="number">7</span>);</span><br></pre></td></tr></table></figure><h5 id="1-绑定-bound-变量和自由-free-变量"><a href="#1-绑定-bound-变量和自由-free-变量" class="headerlink" title="1.绑定(bound)变量和自由(free)变量"></a>1.绑定(bound)变量和自由(free)变量</h5><ul><li><em>绑定变量</em>在范围内声明。它们是参数和局部变量。</li><li><em>自由变量</em>在外部声明。它们也称为<em>非局部变量</em>。</li></ul><h5 id="2-用处"><a href="#2-用处" class="headerlink" title="2.用处"></a>2.用处</h5><ul><li>对于初学者来说，它们只是静态作用域的实现。这样，它们为回调提供上下文数据。</li><li>函数还可以使用它们来存储在函数调用之间保持不变的状态。</li><li>它们可以为对象提供私有数据（通过文字或类产生）。</li></ul><h3 id="第十一章-值-Values"><a href="#第十一章-值-Values" class="headerlink" title="第十一章 值(Values)"></a>第十一章 值(Values)</h3><h4 id="11-1-JavaScript的类型层次"><a href="#11-1-JavaScript的类型层次" class="headerlink" title="11.1 JavaScript的类型层次"></a>11.1 JavaScript的类型层次</h4><p><img src="/shenjiayao-sjy/shenjiayao.github.io/2020/07/15/%E8%AF%BBimpatient-js%E7%9A%84%E7%AC%94%E8%AE%B0%E5%92%8C%E6%80%BB%E7%BB%93/shenjiayao/Downloads/js%E7%B1%BB%E5%9E%8B%E5%B1%82%E6%AC%A1.png" alt="一张图片"></p><p>缺少错误的类，与原始类型相关联的类等等。</p><p>可得javascript分为原始值和对象，该图也区分了对象和类<code>Object</code>的实例。每个Object的实例也是一个对象，但是反之不然。</p><h4 id="11-2-语言规范的种类"><a href="#11-2-语言规范的种类" class="headerlink" title="11.2 语言规范的种类"></a>11.2 语言规范的种类</h4><ul><li><p><code>undefined</code> 与唯一的元素 <code>undefined</code></p></li><li><p><code>null</code> 与唯一的元素 <code>null</code></p></li><li><p><code>boolean</code>与元素<code>false</code>和<code>true</code></p></li><li><p><code>number</code>所有数字的类型（例如<code>-123</code>，<code>3.141</code>）</p></li><li><p><code>bigint</code>所有大整数的类型（例如<code>-123n</code>）</p></li><li><p><code>string</code>所有字符串的类型（例如<code>&#39;abc&#39;</code>）</p></li><li><p><code>symbol</code>所有符号的类型（例如<code>Symbol(&#39;My Symbol&#39;)</code>）</p></li><li><p><code>object</code>所有对象的类型（与<code>Object</code>，类<code>Object</code>及其子类的所有实例的类型不同）</p><p>注意：以上使用TypeScript的名称，不是规范的名称</p></li></ul><h4 id="11-3-原始值-primitives-与对象-objects"><a href="#11-3-原始值-primitives-与对象-objects" class="headerlink" title="11.3 原始值(primitives)与对象(objects)"></a>11.3 原始值(primitives)与对象(objects)</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h5><ul><li>原始值是种类<code>undefined</code>，<code>null</code>，<code>boolean</code>，<code>number</code>，<code>bigint</code>，<code>string</code>，<code>symbol</code>的元素。</li><li>所有其他值都是<em>对象</em>。</li></ul><h5 id="2-对比"><a href="#2-对比" class="headerlink" title="2.对比"></a>2.对比</h5><ul><li>原始值：是JavaScript中数据的原子构造块。<ul><li><strong>它们通过值传递</strong>：将原始值分配给变量或传递给函数时，将复制它们的内容。</li><li><strong>它们通过值进行比较</strong>：比较两个原始值时，将比较它们的<strong>内容</strong>。</li><li>不可变：不能更改，添加或删除它的属性。</li></ul></li><li>对象：是复合数据。<ul><li>它们通过标识（作者的用语）传递：将对象分配给变量或传递给函数时，将复制它们的标识（认为是指针）。</li><li>通过标识（作者的术语）对它们进行比较：比较两个对象时，将对它们的标识进行比较，内容一样不算相同，必须是同一个对象。</li><li>创建方式有两种：对象字面量和数组字面量。</li><li>默认可变：可以自由更改，添加和删除对象的属性。</li></ul></li></ul><p>相同点：都有属性（键值条目），且可以在相同的位置使用</p><h4 id="11-4-运算符typeof和instanceof"><a href="#11-4-运算符typeof和instanceof" class="headerlink" title="11.4 运算符typeof和instanceof"></a>11.4 运算符typeof和instanceof</h4><h5 id="1-对比"><a href="#1-对比" class="headerlink" title="1.对比"></a>1.对比</h5><p>相同：用来确定给定值是什么类型</p><p>不同：</p><ul><li><code>typeof</code> 区分规范的7种类型（用于原始值）</li><li><code>instanceof</code> 测试哪个类创建了给定值（用于对象）,不能用于原始值(不是任何实例)</li></ul><h5 id="2-typeof运算符"><a href="#2-typeof运算符" class="headerlink" title="2.typeof运算符"></a>2.typeof运算符</h5><table><thead><tr><th align="left"><code>x</code></th><th align="left"><code>typeof x</code></th></tr></thead><tbody><tr><td align="left"><code>undefined</code></td><td align="left"><code>&#39;undefined&#39;</code></td></tr><tr><td align="left"><code>null</code></td><td align="left"><code>&#39;object&#39;</code></td></tr><tr><td align="left">Boolean</td><td align="left"><code>&#39;boolean&#39;</code></td></tr><tr><td align="left">Number</td><td align="left"><code>&#39;number&#39;</code></td></tr><tr><td align="left">Bigint</td><td align="left"><code>&#39;bigint&#39;</code></td></tr><tr><td align="left">String</td><td align="left"><code>&#39;string&#39;</code></td></tr><tr><td align="left">Symbol</td><td align="left"><code>&#39;symbol&#39;</code></td></tr><tr><td align="left">Function</td><td align="left"><code>&#39;function&#39;</code></td></tr><tr><td align="left">All other objects</td><td align="left"><code>&#39;object&#39;</code></td></tr></tbody></table><p>注意点：</p><ul><li><code>typeof null</code>返回<code>&#39;object&#39;</code>而不是<code>&#39;null&#39;</code>。那是一个错误。不幸的是，它无法修复。</li><li><code>typeof</code> a function的返回值应该是<code>&#39;object&#39;</code>（functions是对象）。为函数引入单独的类别会造成混淆。</li></ul><h4 id="11-5-类和构造函数"><a href="#11-5-类和构造函数" class="headerlink" title="11.5 类和构造函数"></a>11.5 类和构造函数</h4><h5 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h5><p>构造函数：如果通过<code>new</code>运算符调用它们，普通函数将返回自身的“实例”。</p><p>类可以看作是将规范的单一类型<code>object</code>划分为子类型–与有限的7种规范相比，它们为我们提供了更多类型。每个类都是由它创建的对象的类型。</p><h5 id="2-与原始类型相关联的构造函数"><a href="#2-与原始类型相关联的构造函数" class="headerlink" title="2.与原始类型相关联的构造函数"></a>2.与原始类型相关联的构造函数</h5><p>每个原始类型（除了SPEC-内部类型<code>undefined</code>和<code>null</code>）都具有相关联的构造函数（认为类）：</p><ul><li>构造函数<code>Boolean</code>与布尔值关联。</li><li>构造函数<code>Number</code>与数字关联。</li><li>构造函数<code>String</code>与字符串关联。</li><li>构造函数<code>Symbol</code>与符号关联。</li></ul><p>这些构造函数都有好几个用处，例如<code>Number</code>：</p><ul><li><p>可以将其用作函数，用来将值转换为数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert.equal(Number(&apos;123&apos;), 123);</span><br></pre></td></tr></table></figure></li><li><p><code>Number.prototype</code>提供数字的属性-例如，method <code>.toString()</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert.equal((123).toString, Number.prototype.toString);</span><br></pre></td></tr></table></figure></li><li><p><code>Number</code> 是数字工具函数的名称空间/容器对象，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert.equal(Number.isInteger(123), true);</span><br></pre></td></tr></table></figure></li><li><p>最后，您还可以将其<code>Number</code>用作类并创建数字对象。这些对象与实数不同，应避免使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert.notEqual(new Number(123), 123);</span><br><span class="line">assert.equal(new Number(123).valueOf(), 123);</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-包装原始值"><a href="#3-包装原始值" class="headerlink" title="3.包装原始值"></a>3.包装原始值</h5><p><strong>与原始类型相关的构造函数</strong>也称为包装器类型(wrapper types)，因为它们提供了<strong>将基本值转换为对象</strong>的规范方法。</p><p>在此过程中，原始值被“包装”在对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prim = <span class="literal">true</span>;</span><br><span class="line">assert.equal(<span class="keyword">typeof</span> prim, <span class="string">'boolean'</span>);</span><br><span class="line">assert.equal(prim <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrapped = <span class="built_in">Object</span>(prim);</span><br><span class="line">assert.equal(<span class="keyword">typeof</span> wrapped, <span class="string">'object'</span>);</span><br><span class="line">assert.equal(wrapped <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">assert.equal(wrapped.valueOf(), prim); <span class="comment">// unwrap</span></span><br></pre></td></tr></table></figure><p>注意：在实际中，包装很少有问题，但是在语言规范中<strong>内部使用包装来赋予基本值属性</strong>。</p><h4 id="11-6-类型转换"><a href="#11-6-类型转换" class="headerlink" title="11.6 类型转换"></a>11.6 类型转换</h4><p>在JavaScript中，可以使用两种方法将值转换为其他类型。</p><h5 id="1-显式转换-Explicit-conversion"><a href="#1-显式转换-Explicit-conversion" class="headerlink" title="1.显式转换(Explicit conversion)"></a>1.显式转换(Explicit conversion)</h5><p>(i)与原始类型关联的函数(构造函数)将值显式转换为另一个类型</p><p>(ii)用<code>Object()</code>将值转换为对象</p><table><thead><tr><th align="left"><code>x</code></th><th align="left"><code>Object(x)</code></th></tr></thead><tbody><tr><td align="left"><code>undefined</code></td><td align="left"><code>{}</code></td></tr><tr><td align="left"><code>null</code></td><td align="left"><code>{}</code></td></tr><tr><td align="left">boolean</td><td align="left"><code>new Boolean(x)</code></td></tr><tr><td align="left">number</td><td align="left"><code>new Number(x)</code></td></tr><tr><td align="left">bigint</td><td align="left">An instance of <code>BigInt</code> (<code>new</code> throws <code>TypeError</code>)</td></tr><tr><td align="left">string</td><td align="left"><code>new String(x)</code></td></tr><tr><td align="left">symbol</td><td align="left">An instance of <code>Symbol</code> (<code>new</code> throws <code>TypeError</code>)</td></tr><tr><td align="left">object</td><td align="left"><code>x</code></td></tr></tbody></table><h5 id="2-强制转换-Coercion-自动转换"><a href="#2-强制转换-Coercion-自动转换" class="headerlink" title="2.强制转换(Coercion)(自动转换)"></a>2.强制转换(<em>Coercion</em>)(自动转换)</h5><p>对于许多操作，如果操作数/参数的类型不合适，JavaScript会自动将其转换。这种自动转换称为强制转换。</p><p>许多<strong>内置函数</strong>也具有强制性。例如，将<code>parseInt()</code>其参数强制转换为字符串（解析在非数字的第一个字符处停止）。</p><h3 id="第十二章-运算符-0perators"><a href="#第十二章-运算符-0perators" class="headerlink" title="第十二章 运算符(0perators)"></a>第十二章 运算符(0perators)</h3><h4 id="12-1-理解运算符"><a href="#12-1-理解运算符" class="headerlink" title="12.1 理解运算符"></a>12.1 理解运算符</h4><h5 id="1-运算值强制它们的操作数为适当的类型"><a href="#1-运算值强制它们的操作数为适当的类型" class="headerlink" title="1.运算值强制它们的操作数为适当的类型"></a>1.运算值强制它们的操作数为适当的类型</h5><p>如乘法运算符<code>*</code>强制操作数转换为数字，还有用于访问对象的属性的方括号运算符<code>[]</code>只能处理字符串和符号,其它值都被强制转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj[<span class="string">'true'</span>] = <span class="number">123</span>;<span class="comment">//'true'为对象的一个属性</span></span><br></pre></td></tr></table></figure><h5 id="2-大多数运算符只适用于原始值"><a href="#2-大多数运算符只适用于原始值" class="headerlink" title="2.大多数运算符只适用于原始值"></a>2.大多数运算符只适用于原始值</h5><p>如果操作数是一个对象，则通常将其强制为原始值</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">//[1,2,3] =&gt; '1,2,3'//强制转化为原始值字符串</span></span><br><span class="line"><span class="string">'1,2,34,5,6'</span> <span class="comment">//两个字符串相连接</span></span><br></pre></td></tr></table></figure><h4 id="12-2-加号"><a href="#12-2-加号" class="headerlink" title="12.2 加号(+)"></a>12.2 加号(+)</h4><p>它将两个操作数都强制转化为原始值，并切换到以下两种模式之一：</p><ul><li>字符串模式：如果两个原始值<strong>之一是字符串</strong>，则它将另一个转换为字符串，将两个字符串连接起来并返回结果。</li><li>数字模式：否则，它将两个操作数都转换为数字，将它们相加，然后返回结果。</li></ul><h4 id="12-3-赋值运算符"><a href="#12-3-赋值运算符" class="headerlink" title="12.3 赋值运算符"></a>12.3 赋值运算符</h4><h5 id="1-普通赋值运算符"><a href="#1-普通赋值运算符" class="headerlink" title="1.普通赋值运算符"></a>1.普通赋值运算符</h5><p>(i)用来更改存储位置，可以给之前声明过的变量、属性、数组元素赋值</p><p>(ii)变量声明中的初始化程序也可以视为一种赋值形式</p><h5 id="2-复合赋值运算符"><a href="#2-复合赋值运算符" class="headerlink" title="2.复合赋值运算符"></a>2.复合赋值运算符</h5><p>所有复合赋值运算符列表:</p><ul><li><p>算术运算符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+= -= *= /= %= **=(*)</span><br></pre></td></tr></table></figure><p><code>+=</code> 也适用于字符串连接</p></li><li><p>按位运算符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;=零填充左位移 &gt;&gt;=有符号右位移 &gt;&gt;&gt;=零填充右位移 &amp;=与 ^=异或 |=或</span><br></pre></td></tr></table></figure></li></ul><h4 id="12-4-相等：-vs"><a href="#12-4-相等：-vs" class="headerlink" title="12.4 相等：== vs ==="></a>12.4 相等：== vs ===</h4><p>JavaScript有两种相等运算符：loose equality (<code>==</code>) and strict equality (<code>===</code>)，或是双重等于(抽象相等性比较)和三重等于</p><h5 id="1-松散相等"><a href="#1-松散相等" class="headerlink" title="1.松散相等"></a>1.松散相等</h5><p>是JavaScript的怪癖之一，它通常会强制转化操作数。</p><p>当（且仅当！）另一个操作数是原始值时，对象被强制为原始值。</p><p>如果两个操作数都是对象，则只有当它们是同一对象时它们才相等。</p><p><code>==</code>认为<code>null</code>和<code>undefined</code>相等。</p><h5 id="2-严格相等"><a href="#2-严格相等" class="headerlink" title="2.严格相等"></a>2.严格相等</h5><p>从来不强制转换，两个值只有在具有相同类型的情况下才相等。</p><p>一个对象只有在另一个值跟它是同一个对象时才与它相等。</p><p><code>===</code>认为<code>null</code>和<code>undefined</code>不相等。</p><h5 id="3-比-更严格的：Object-is"><a href="#3-比-更严格的：Object-is" class="headerlink" title="3. 比===更严格的：Object.is()"></a>3. 比===更严格的：Object.is()</h5><p>方法<code>Object.is()</code>用来比较两个值是否相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Object</span>.is(<span class="number">123</span>, <span class="number">123</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="built_in">Object</span>.is(<span class="number">123</span>, <span class="string">'123'</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>它认为NaN等于自身。可用来改进数组的方法 arr.indexof()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myIndexOf = <span class="function">(<span class="params">arr, elem</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.findIndex(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Object</span>.is(x, elem));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; myIndexOf([<span class="number">0</span>,<span class="literal">NaN</span>,<span class="number">2</span>], <span class="literal">NaN</span>)</span><br><span class="line"><span class="number">1</span> <span class="comment">//找到了</span></span><br><span class="line">&gt; [<span class="number">0</span>,<span class="literal">NaN</span>,<span class="number">2</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="number">-1</span> <span class="comment">//没有找到</span></span><br></pre></td></tr></table></figure><h4 id="12-5-关系运算符"><a href="#12-5-关系运算符" class="headerlink" title="12.5 关系运算符"></a>12.5 关系运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;  &lt;=  &gt;  &gt;=</span><br></pre></td></tr></table></figure><p>适用于数字和字符串，<code>&lt;=</code>和<code>&gt;=</code>基于严格的平等原则。</p><p>不能很好地比较人类语言的文本，例如，当涉及到大写字母或重音符号时。</p><h4 id="12-6-用于指定默认值的无效的合并运算符："><a href="#12-6-用于指定默认值的无效的合并运算符：" class="headerlink" title="12.6 用于指定默认值的无效的合并运算符：??"></a>12.6 用于指定默认值的无效的合并运算符：??</h4><h5 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a>1.定义</h5><p>我们收到一个值，并且只想在不为<code>null</code>或<code>undefined</code>时使用它。否则，我们想使用默认值作为后备。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> valueToUse = receivedValue ?? defaultValue;</span><br></pre></td></tr></table></figure><p>以下两个表达式是等效的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a ?? b</span><br><span class="line">a !== <span class="literal">undefined</span> &amp;&amp; a !== <span class="literal">null</span> ? a : b</span><br></pre></td></tr></table></figure><h5 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h5><p>可以为属性指定默认值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params">fileDesc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fileDesc.title ?? <span class="string">'(Untitled)'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以对默认值使用解构:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params">fileDesc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;title = <span class="string">'(Untitled)'</span>&#125; = fileDesc;</span><br><span class="line">  <span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Javascript逻辑运算符“或”的应用"><a href="#2-Javascript逻辑运算符“或”的应用" class="headerlink" title="2.Javascript逻辑运算符“或”的应用"></a>2.Javascript逻辑运算符“或”的应用</h5><p>或运算符可以被用来为一个新定义好的变量提供一个默认值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="literal">false</span>,</span><br><span class="line">foobar = <span class="number">5</span>,</span><br><span class="line">foo = bar || foobar; <span class="comment">// foo = 5</span></span><br></pre></td></tr></table></figure><p>在上面这个例子当中，只有当bar蕴涵假的时候，foobar才会将它自身的值传递给foo。</p><p>如果一个变量有可能是空，那么或运算符可以在函数中用来提供一个默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"> a, b </span>)</span>&#123;</span><br><span class="line">    a = a || <span class="number">5</span>;</span><br><span class="line">    b = b || <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'Values:'</span> + a + <span class="string">','</span> +b );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<code>||</code>遇到<code>null</code>,<code>undefined</code>还有其它虚假值(如<code>false</code>,<code>0</code>,<code>&#39;&#39;</code>,<code>On</code>)时都会返回默认值。相比较，<code>??</code>遇到其它虚假值会返回虚假值本身。</p><h4 id="12-7-其它运算符"><a href="#12-7-其它运算符" class="headerlink" title="12.7 其它运算符"></a>12.7 其它运算符</h4><h5 id="1-逗号运算符"><a href="#1-逗号运算符" class="headerlink" title="1.逗号运算符"></a>1.逗号运算符</h5><p>逗号运算符有两个操作数，对它们进行求值并返回第二个。</p><h5 id="2-void运算符"><a href="#2-void运算符" class="headerlink" title="2.void运算符"></a>2.void运算符</h5><p>计算其操作数并返回<code>undefined</code>。</p><h3 id="第十三章-非值-non-values-undefined-与null"><a href="#第十三章-非值-non-values-undefined-与null" class="headerlink" title="第十三章 非值(non-values): undefined 与null"></a>第十三章 非值(non-values): undefined 与null</h3><h4 id="13-1-区别"><a href="#13-1-区别" class="headerlink" title="13.1 区别"></a>13.1 区别</h4><ul><li><code>undefined</code> 表示“未初始化”或“不存在”，是语言使用的非值。</li><li><code>null</code>表示“对象的值的故意缺失”，表示“已明确关闭”。也就是说，它有助于实现一个同时包含有意义的值和表示“无意义的值”的元值的类型。</li></ul><h4 id="13-2-出现"><a href="#13-2-出现" class="headerlink" title="13.2 出现"></a>13.2 出现</h4><h5 id="1-undefined的出现场地"><a href="#1-undefined的出现场地" class="headerlink" title="1.undefined的出现场地"></a>1.undefined的出现场地</h5><p>表示未初始化的<strong>变量</strong>、未提供的<strong>参数</strong>、不存在的<strong>属性</strong>、没有返回值的<strong>函数</strong></p><h5 id="2-null的出现场地"><a href="#2-null的出现场地" class="headerlink" title="2.null的出现场地"></a>2.null的出现场地</h5><ul><li>对象的原型可以是一个对象，或者在原型链的末尾，<code>null.Object.prototype</code>没有原型：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Object.getPrototypeOf(Object.prototype)</span><br><span class="line">null</span><br></pre></td></tr></table></figure><ul><li>如果将正则表达式（例如<code>/a/</code>）与字符串（例如<code>&#39;x&#39;</code>）进行匹配，则将获得一个具有匹配数据的对象（如果匹配成功）或<code>null</code>（如果匹配失败）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; /a/.exec(&apos;x&apos;)</span><br><span class="line">null</span><br></pre></td></tr></table></figure><ul><li>JSON数据格式不支持<code>undefined</code>，只有<code>null</code>。</li></ul><h4 id="13-3-一些注意点"><a href="#13-3-一些注意点" class="headerlink" title="13.3 一些注意点"></a>13.3 一些注意点</h4><h5 id="1-truthy"><a href="#1-truthy" class="headerlink" title="1.truthy?"></a>1.truthy?</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x) &#123; <span class="comment">//</span></span><br><span class="line">  <span class="comment">// x is neither: undefined, null, false, 0, NaN, ''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-undefined和null没有属性"><a href="#2-undefined和null没有属性" class="headerlink" title="2. undefined和null没有属性"></a>2. <code>undefined</code>和<code>null</code>没有属性</h5><h5 id="3-undefined和null的历史"><a href="#3-undefined和null的历史" class="headerlink" title="3.undefined和null的历史"></a>3.<code>undefined</code>和<code>null</code>的历史</h5><p>在JavaScript中，初始化值取决于变量的静态类型：</p><ul><li>对象类型的变量被初始化为<code>null</code></li><li>每个基本类型都有其自己的初始化值。例如，<code>int</code>变量使用初始化<code>0</code>。</li></ul><p>在JavaScript中，每个变量可以同时包含对象值和原始值。因此，如果<code>null</code>表示“不是对象”，则JavaScript还需要一个表示“既不是对象也不是原始值”的初始化值。该初始化值为<code>undefined</code>。</p><h3 id="第十四章-布尔值-Booleans"><a href="#第十四章-布尔值-Booleans" class="headerlink" title="第十四章 布尔值(Booleans)"></a>第十四章 布尔值(Booleans)</h3><p>原始类型boolean包含两个值– <code>false</code>和<code>true</code></p><h4 id="14-1-转化为布尔值"><a href="#14-1-转化为布尔值" class="headerlink" title="14.1 转化为布尔值"></a>14.1 转化为布尔值</h4><p>可以通过以下三种方式将任意值<code>x</code>转换为布尔值。</p><h5 id="1-使用结构函数"><a href="#1-使用结构函数" class="headerlink" title="1.使用结构函数"></a>1.使用结构函数</h5><p><code>Boolean(x)</code> 是最具描述性和推荐的。</p><table><thead><tr><th align="left"><code>x</code></th><th align="left"><code>Boolean(x)</code></th></tr></thead><tbody><tr><td align="left"><code>undefined</code></td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>null</code></td><td align="left"><code>false</code></td></tr><tr><td align="left">boolean</td><td align="left"><code>x</code> (no change)</td></tr><tr><td align="left">number</td><td align="left"><code>0</code> <code>→</code> <code>false</code>, <code>NaN</code> <code>→</code> <code>false</code></td></tr><tr><td align="left"></td><td align="left">Other numbers <code>→</code> <code>true</code></td></tr><tr><td align="left">bigint</td><td align="left"><code>0</code> <code>→</code> <code>false</code></td></tr><tr><td align="left"></td><td align="left">Other numbers <code>→</code> <code>true</code></td></tr><tr><td align="left">string</td><td align="left"><code>&#39;&#39;</code> <code>→</code> <code>false</code></td></tr><tr><td align="left"></td><td align="left">Other strings <code>→</code> <code>true</code></td></tr><tr><td align="left">symbol</td><td align="left"><code>true</code></td></tr><tr><td align="left">object</td><td align="left">Always <code>true</code></td></tr></tbody></table><h5 id="2-使用条件运算符"><a href="#2-使用条件运算符" class="headerlink" title="2.使用条件运算符"></a>2.使用条件运算符</h5><p><code>x ? true : false</code></p><h5 id="3-使用逻辑非运算符（-）"><a href="#3-使用逻辑非运算符（-）" class="headerlink" title="3.使用逻辑非运算符（!）"></a>3.使用逻辑非运算符（<code>!</code>）</h5><p><code>!!x</code>：该运算符将其操作数强制为布尔值。再次应用它以获得非否定的结果。</p><h4 id="14-2-Falsy和truthy值"><a href="#14-2-Falsy和truthy值" class="headerlink" title="14.2 Falsy和truthy值"></a>14.2 Falsy和truthy值</h4><p>在 JavaScript中，<code>if (value) {}</code>等价于:<code>if (Boolean(value) === true) {}</code></p><p>如果当转换为布尔值时结果是<code>true</code>，这个值被叫做truthy；如果当转换为布尔值时结果是<code>false</code>，这个值被叫做falsy。每个值不是真实值就是虚假值。</p><p>虚假值列表：</p><ul><li><code>undefined</code></li><li><code>null</code></li><li>Boolean: <code>false</code></li><li>Numbers: <code>0</code>, <code>NaN</code></li><li>Bigint: <code>0n</code></li><li>String: <code>&#39;</code></li></ul><h4 id="14-3-基础真实值的存在检查"><a href="#14-3-基础真实值的存在检查" class="headerlink" title="14.3 基础真实值的存在检查"></a>14.3 基础真实值的存在检查</h4><p>在JavaScript中，如果读取了不存在的内容（例如，缺少参数或缺少属性），则通常会得到<code>undefined</code>结果。在这些情况下，存在检查等于将值与<code>undefined</code>进行比较。</p><h5 id="1-检查属性的存在"><a href="#1-检查属性的存在" class="headerlink" title="1.检查属性的存在"></a>1.检查属性的存在</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj.prop !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">// obj has property .prop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>undefined</code>是虚假值，我们可以将此检查缩短为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj.prop) &#123;</span><br><span class="line">  <span class="comment">// obj has property .prop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但还有可能obj.prop是其它虚假值。</p><p>另一例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">fileDesc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!fileDesc.path) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing property: .path'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line">readFile(&#123; <span class="attr">path</span>: <span class="string">'foo.txt'</span> &#125;); <span class="comment">// no error</span></span><br></pre></td></tr></table></figure><p>避免其它虚假值的更好方法(使用<code>in</code>运算符)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! (<span class="string">'path'</span> <span class="keyword">in</span> fileDesc)) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing property: .path'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-检查参数的存在"><a href="#2-检查参数的存在" class="headerlink" title="2.检查参数的存在"></a>2.检查参数的存在</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">    <span class="comment">//同上，有一个更好的替代是if (x === undefined)</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter x'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;<span class="comment">//检查是否提供了参数</span></span><br></pre></td></tr></table></figure><h4 id="14-4-条件运算符"><a href="#14-4-条件运算符" class="headerlink" title="14.4 条件运算符(? :)"></a>14.4 条件运算符(? :)</h4><p>条件运算符是<code>if</code>语句的表达式版本。其语法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">«condition» ? «thenExpression» : «elseExpression»</span><br></pre></td></tr></table></figure><p>由于条件运算符具有三个操作数，因此也称为三元运算符(ternary operator)。</p><h4 id="14-5-二进制逻辑运算符：And-x-amp-amp-y-Or-x-y"><a href="#14-5-二进制逻辑运算符：And-x-amp-amp-y-Or-x-y" class="headerlink" title="14.5 二进制逻辑运算符：And (x &amp;&amp; y), Or (x || y)"></a>14.5 二进制逻辑运算符：And (<code>x &amp;&amp; y</code>), Or (<code>x || y</code>)</h4><p>运算符<code>&amp;&amp;</code>和<code>||</code>具有保值性和短路性：</p><ul><li>保值表示操作数被解释为布尔值，但未更改返回值</li><li>短路表示如果第一个操作数已经确定结果，则不评估第二个操作数。</li></ul><p>注意：条件运算符是唯一延迟评估其操作数的运算符。通常，在执行操作之前会评估所有操作数。</p><h5 id="1-逻辑与"><a href="#1-逻辑与" class="headerlink" title="1.逻辑与"></a>1.逻辑与</h5><p>表达式<code>a &amp;&amp; b</code>的计算如下：</p><ol><li>评估<code>a</code>。</li><li>结果虚假就把它返还。</li><li>否则，评估<code>b</code>并返回结果。</li></ol><h5 id="2-逻辑或"><a href="#2-逻辑或" class="headerlink" title="2.逻辑或"></a>2.逻辑或</h5><p>表达式<code>a || b</code>的计算如下：</p><ol><li>评估<code>a</code>。</li><li>结果真实就把它返还。</li><li>否则，评估<code>b</code>并返回结果。</li></ol><h5 id="3-逻辑非"><a href="#3-逻辑非" class="headerlink" title="3.逻辑非"></a>3.逻辑非</h5><p>表达式<code>!x</code>的计算如下：</p><ol><li>评估<code>x</code>。</li><li>是真的就返回<code>false</code>。</li><li>否则，返回<code>true</code>。</li></ol><h3 id="第十五章-数字-Numbers"><a href="#第十五章-数字-Numbers" class="headerlink" title="第十五章 数字(Numbers)"></a>第十五章 数字(Numbers)</h3><p>JavaScript有两种数值：</p><ul><li>Numbers是64位浮点数，也用于较小的整数（在正负53位范围内）。</li><li>Bigints代表具有任意精度的整数。</li></ul><h4 id="15-1-Numbers适用于浮点数和整数"><a href="#15-1-Numbers适用于浮点数和整数" class="headerlink" title="15.1 Numbers适用于浮点数和整数"></a>15.1 Numbers适用于浮点数和整数</h4><p>该类型<code>number</code>用于JavaScript中的整数和浮点数。</p><p>所有数字均为doubles，整数只是没有小数点的浮点数。</p><p>注意：大多数JavaScript引擎通常都可以使用实整数。</p><h4 id="15-2-数字字面量"><a href="#15-2-数字字面量" class="headerlink" title="15.2 数字字面量"></a>15.2 数字字面量</h4><h5 id="1-整数字面量"><a href="#1-整数字面量" class="headerlink" title="1.整数字面量"></a>1.整数字面量</h5><p>几个整数字面量可以各种底数表示整数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Binary (base 2)</span></span><br><span class="line">assert.equal(<span class="number">0b11</span>, <span class="number">3</span>); <span class="comment">//二进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Octal (base 8)</span></span><br><span class="line">assert.equal(<span class="number">0o10</span>, <span class="number">8</span>); <span class="comment">//八进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Decimal (base 10):</span></span><br><span class="line">assert.equal(<span class="number">35</span>, <span class="number">35</span>); <span class="comment">//十进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexadecimal (base 16) </span></span><br><span class="line">assert.equal(<span class="number">0xE7</span>, <span class="number">231</span>); <span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure><h5 id="2-浮点数字面量"><a href="#2-浮点数字面量" class="headerlink" title="2.浮点数字面量"></a>2.浮点数字面量</h5><p>浮点数只能以10为底表示。</p><p>科学记数法：指数：值<code>eN</code>   =&gt;  值×10的N次方</p><h5 id="3-一个陷阱"><a href="#3-一个陷阱" class="headerlink" title="3.一个陷阱"></a>3.一个陷阱</h5><p>访问整数字面量的属性时，如果整数字面量后紧跟一个点，则该点将被解释为小数点。</p><p>解决方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.0</span>.toString()</span><br><span class="line">(<span class="number">7</span>).toString()</span><br><span class="line"><span class="number">7.</span>.toString()</span><br><span class="line"><span class="number">7</span> .toString()  <span class="comment">// space before dot</span></span><br></pre></td></tr></table></figure><h4 id="15-3-算数运算符"><a href="#15-3-算数运算符" class="headerlink" title="15.3 算数运算符"></a>15.3 算数运算符</h4><h5 id="1-二进制算数运算符"><a href="#1-二进制算数运算符" class="headerlink" title="1.二进制算数运算符"></a>1.二进制算数运算符</h5><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">例</th></tr></thead><tbody><tr><td align="left"><code>n + m</code></td><td align="left">加成</td><td align="left"><code>3 + 4</code> <code>→</code> <code>7</code></td></tr><tr><td align="left"><code>n - m</code></td><td align="left">减法</td><td align="left"><code>9 - 1</code> <code>→</code> <code>8</code></td></tr><tr><td align="left"><code>n * m</code></td><td align="left">乘法</td><td align="left"><code>3 * 2.25</code> <code>→</code> <code>6.75</code></td></tr><tr><td align="left"><code>n / m</code></td><td align="left">除</td><td align="left"><code>5.625 / 5</code> <code>→</code> <code>1.125</code></td></tr><tr><td align="left"><code>n % m</code></td><td align="left">余</td><td align="left"><code>8 % 5</code> <code>→</code> <code>3</code></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"><code>-8 % 5</code> <code>→</code> <code>-3</code></td></tr><tr><td align="left"><code>n ** m</code></td><td align="left"><strong>求幂</strong></td><td align="left"><code>4 ** 2</code> <code>→</code> <code>16</code></td></tr></tbody></table><p>一元加号（<code>+</code>）和负号（<code>-</code>）将其操作数强制转换为数字。</p><h5 id="2-递增（-）和递减（-）"><a href="#2-递增（-）和递减（-）" class="headerlink" title="2.递增（++）和递减（--）"></a>2.递增（<code>++</code>）和递减（<code>--</code>）</h5><p>前缀<code>++</code>和前缀会<code>--</code>更改其操作数，然后将其返回；而后缀<code>++</code>和后缀<code>--</code>返回其操作数，然后更改它们。</p><h5 id="3-操作数不只是变量"><a href="#3-操作数不只是变量" class="headerlink" title="3.操作数不只是变量"></a>3.操作数不只是变量</h5><p>可以将上述的运算符用在属性值和数组元素上。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">++obj.a;</span><br><span class="line"><span class="keyword">const</span> arr = [ <span class="number">4</span> ];</span><br><span class="line">arr[<span class="number">0</span>]++;</span><br></pre></td></tr></table></figure><h4 id="15-4-转换为数字"><a href="#15-4-转换为数字" class="headerlink" title="15.4 转换为数字"></a>15.4 转换为数字</h4><p>这是将值转换为数字的三种方法：</p><ul><li><code>Number(value)</code></li><li><code>+value</code></li><li><code>parseFloat(value)</code> （避免；与其他两个不同！）</li></ul><p>建议：使用第一种</p><table><thead><tr><th align="left"><code>x</code></th><th align="left"><code>Number(x)</code></th></tr></thead><tbody><tr><td align="left"><code>undefined</code></td><td align="left"><code>NaN</code></td></tr><tr><td align="left"><code>null</code></td><td align="left"><code>+0</code></td></tr><tr><td align="left">boolean</td><td align="left"><code>false</code> <code>→</code> <code>+0</code>, <code>true</code> <code>→</code> <code>1</code></td></tr><tr><td align="left">number</td><td align="left"><code>x</code> (no change)</td></tr><tr><td align="left">bigint</td><td align="left">Throws <code>TypeError</code></td></tr><tr><td align="left">string</td><td align="left"><code>&#39;&#39;</code> <code>→</code> <code>+0</code></td></tr><tr><td align="left"></td><td align="left">Other <code>→</code> 解析的数字, 忽略前和尾部的空格</td></tr><tr><td align="left">symbol</td><td align="left">Throws <code>TypeError</code></td></tr><tr><td align="left">object</td><td align="left">可配置 (e.g. via <code>.valueOf()</code>)</td></tr></tbody></table><h4 id="15-5-错误值"><a href="#15-5-错误值" class="headerlink" title="15.5 错误值"></a>15.5 错误值</h4><p>发生错误时，将返回两个数字值：</p><ul><li><code>NaN</code></li><li><code>Infinity</code></li></ul><h5 id="1-错误值：NaN"><a href="#1-错误值：NaN" class="headerlink" title="1.错误值：NaN"></a>1.错误值：NaN</h5><p><code>NaN</code>是“ not a number”的缩写,而JavaScript认为它是一个数字。</p><p>(i) 什么时候返回NaN？</p><ul><li>无法解析数字</li><li>无法执行操作</li><li>操作数或参数为<code>NaN</code>（传播错误）</li></ul><p>(ii) 怎么检查是NaN？</p><p><code>NaN</code> 是唯一不严格等于其自身的JavaScript值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="literal">NaN</span>;</span><br><span class="line"></span><br><span class="line">assert.equal(<span class="built_in">Number</span>.isNaN(x), <span class="literal">true</span>); <span class="comment">// preferred</span></span><br><span class="line">assert.equal(<span class="built_in">Object</span>.is(x, <span class="literal">NaN</span>), <span class="literal">true</span>);</span><br><span class="line">assert.equal(x !== x, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h5 id="2-在数组中找NaN"><a href="#2-在数组中找NaN" class="headerlink" title="2.在数组中找NaN"></a>2.在数组中找NaN</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; [<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Number</span>.isNaN(x))</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt; [<span class="literal">NaN</span>].find(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Number</span>.isNaN(x))</span><br><span class="line"><span class="literal">NaN</span></span><br></pre></td></tr></table></figure><h5 id="3-错误值：Infinity"><a href="#3-错误值：Infinity" class="headerlink" title="3.错误值：Infinity"></a>3.错误值：Infinity</h5><p><code>Infinity</code>大于所有其他数字（除外<code>NaN</code>），使其成为一个很好的默认值</p><p>如何检查值是否为<code>Infinity</code>？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">assert.equal(x === <span class="literal">Infinity</span>, <span class="literal">true</span>);</span><br><span class="line">assert.equal(<span class="built_in">Number</span>.isFinite(x), <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="15-6-数字的精度"><a href="#15-6-数字的精度" class="headerlink" title="15.6 数字的精度"></a>15.6 数字的精度</h4><p>在内部，JavaScript浮点数以2为基，。这意味着小数部分（以10为底）不能总是精确地表示出来。因此，在JavaScript中执行算术时，需要考虑舍入错误。</p><p>它使用三个整数来执行此操作，总共占用了64位存储空间（双精度）：</p><table><thead><tr><th align="left">零件</th><th align="left">尺寸</th><th align="left">整数范围</th></tr></thead><tbody><tr><td align="left">符号</td><td align="left">1位</td><td align="left">[0，1]</td></tr><tr><td align="left">分数</td><td align="left">52位</td><td align="left">[0，2^52 -1]</td></tr><tr><td align="left">指数</td><td align="left">11位</td><td align="left">[−1023，1024]</td></tr></tbody></table><p>这些整数表示的浮点数计算如下：</p><blockquote><p>（–1）^符号 ×0b1。分数×2 ^指数</p></blockquote><p>此表示形式无法编码为零，因为其第二个成分（涉及分数）始终具有前导1。因此，零通过特殊指数-1023和分数0进行编码。</p><h4 id="15-7-整数数字"><a href="#15-7-整数数字" class="headerlink" title="15.7 整数数字"></a>15.7 整数数字</h4><p>整数是不含小数的普通（浮点）数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> === <span class="number">1.0</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="built_in">Number</span>.isInteger(<span class="number">1.0</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="1-转换为整数"><a href="#1-转换为整数" class="headerlink" title="1.转换为整数"></a>1.转换为整数</h5><ul><li><p><code>Math.floor(n)</code>：返回最大整数<code>i</code>≤<code>n</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.floor(<span class="number">2.1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt; <span class="built_in">Math</span>.floor(<span class="number">2.9</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.ceil(n)</code>：返回最小整数<code>i</code>≥<code>n</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.ceil(<span class="number">2.1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; <span class="built_in">Math</span>.ceil(<span class="number">2.9</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.round(n)</code>：返回整数，它是“最接近” <code>n</code>与<code>__.5</code>被向上舍入-例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.round(<span class="number">2.4</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt; <span class="built_in">Math</span>.round(<span class="number">2.5</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.trunc(n)</code>：删除具有的所有小数部分（在该点之后）<code>n</code>，因此将其转换为整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.trunc(<span class="number">2.1</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt; <span class="built_in">Math</span>.trunc(<span class="number">2.9</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="2-安全整数"><a href="#2-安全整数" class="headerlink" title="2.安全整数"></a>2.安全整数</h5><p>这是在JavaScript 中<em>安全</em>的整数范围（53位加一个符号）：</p><blockquote><p>[–2 53 –1，2 53 –1]</p></blockquote><p>以下Number的属性帮助确定整数是否安全：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert.equal(<span class="built_in">Number</span>.isSafeInteger(<span class="number">5</span>), <span class="literal">true</span>);</span><br><span class="line">assert.equal(<span class="built_in">Number</span>.isSafeInteger(<span class="string">'5'</span>), <span class="literal">false</span>);</span><br><span class="line">assert.equal(<span class="built_in">Number</span>.isSafeInteger(<span class="number">5.1</span>), <span class="literal">false</span>);</span><br><span class="line">assert.equal(<span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Number</span>.MAX_SAFE_INTEGER), <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h5 id="3-安全计算"><a href="#3-安全计算" class="headerlink" title="3.安全计算"></a>3.安全计算</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isSafeInteger(a) &amp;&amp; isSafeInteger(b) &amp;&amp; isSafeInteger(a op b)</span><br></pre></td></tr></table></figure><p>两个操作数和结果都必须是安全的计算才是安全计算。</p><h3 id="第十七章-Unicode简介"><a href="#第十七章-Unicode简介" class="headerlink" title="第十七章  Unicode简介"></a>第十七章  Unicode简介</h3><p>Unicode是在世界上大多数书写系统中表示和管理文本的标准。几乎所有与文本兼容的现代软件都支持Unicode。</p><h4 id="17-1-代码点与代码单元"><a href="#17-1-代码点与代码单元" class="headerlink" title="17.1 代码点与代码单元"></a>17.1 代码点与代码单元</h4><ul><li>代码点是代表Unicode字符的数字</li><li>代码单位是对代码点进行编码以存储或传输Unicode文本的数字。一个或多个代码单元对单个代码点进行编码。每个代码单元具有相同的大小，这取决于所使用的编码格式。最流行的格式UTF-8具有8位代码单元。</li></ul><h5 id="1-代码点"><a href="#1-代码点" class="headerlink" title="1.代码点"></a>1.代码点</h5><p>Unicode的第一个版本具有16位代码点。从那时起，字符的数量大大增加，代码点的大小扩展到21位。这21位分为17个平面，每个平面16位。</p><h4 id="17-2-Web开发中使用的编码：UTF-16和UTF-8"><a href="#17-2-Web开发中使用的编码：UTF-16和UTF-8" class="headerlink" title="17.2  Web开发中使用的编码：UTF-16和UTF-8"></a>17.2  Web开发中使用的编码：UTF-16和UTF-8</h4><h5 id="1-ECMAScript规范在内部将源代码表示为UTF-16"><a href="#1-ECMAScript规范在内部将源代码表示为UTF-16" class="headerlink" title="1.ECMAScript规范在内部将源代码表示为UTF-16"></a>1.ECMAScript规范在内部将源代码表示为UTF-16</h5><h5 id="2-JavaScript字符串中的字符基于UTF-16代码单元"><a href="#2-JavaScript字符串中的字符基于UTF-16代码单元" class="headerlink" title="2.JavaScript字符串中的字符基于UTF-16代码单元"></a>2.JavaScript字符串中的字符基于UTF-16代码单元</h5><h5 id="3-文件中的源代码：UTF-8"><a href="#3-文件中的源代码：UTF-8" class="headerlink" title="3.文件中的源代码：UTF-8"></a>3.文件中的源代码：UTF-8</h5><p>现在，HTML和JavaScript几乎总是被编码为UTF-8。</p><h3 id="第十八章-字符-String"><a href="#第十八章-字符-String" class="headerlink" title="第十八章 字符(String)"></a>第十八章 字符(String)</h3><p>字符串是JavaScript中的原始值，并且是不可变的。也就是说，与字符串相关的操作始终会产生新的字符串，而不会更改现有的字符串。</p><h4 id="18-1-纯字符串文字"><a href="#18-1-纯字符串文字" class="headerlink" title="18.1 纯字符串文字"></a>18.1 纯字符串文字</h4><h5 id="1-注意点"><a href="#1-注意点" class="headerlink" title="1.注意点"></a>1.注意点</h5><p>纯字符串文字由单引号或双引号分隔，又因为单引号使提及HTML更为容易所以它的使用更频繁，而HTML中首选双引号。</p><h5 id="2-转义"><a href="#2-转义" class="headerlink" title="2.转义"></a>2.转义</h5><p>反斜杠使您可以创建特殊字符：</p><ul><li>Unix换行符： <code>&#39;\n&#39;</code></li><li>Windows换行符： <code>&#39;\r\n&#39;</code></li><li>标签： <code>&#39;\t&#39;</code></li><li>反斜杠： <code>&#39;\\&#39;</code></li></ul><h3 id="18-2-访问字符和代码点"><a href="#18-2-访问字符和代码点" class="headerlink" title="18.2 访问字符和代码点"></a>18.2 访问字符和代码点</h3><h5 id="1-访问JavaScript字符"><a href="#1-访问JavaScript字符" class="headerlink" title="1.访问JavaScript字符"></a>1.访问JavaScript字符</h5><p>JavaScript没有额外的字符数据类型–字符始终表示为字符串。</p><h5 id="2-通过for-of和扩展访问Unicode代码点字符"><a href="#2-通过for-of和扩展访问Unicode代码点字符" class="headerlink" title="2.通过for-of和扩展访问Unicode代码点字符"></a>2.通过<code>for-of</code>和扩展访问Unicode代码点字符</h5><p>通过<code>for-of</code>或扩展（<code>...</code>）遍历字符串可访问Unicode代码点字符。每个代码点字符都由1-2个JavaScript字符编码组成。</p><p>这是通过以下方法遍历字符串的代码点字符的方式<code>for-of</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> ch <span class="keyword">of</span> <span class="string">'x🙂y'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是通过扩展将字符串转换为代码点字符数组的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert.deepEqual([...<span class="string">'x🙂y'</span>], [<span class="string">'x'</span>, <span class="string">'🙂'</span>, <span class="string">'y'</span>]);</span><br></pre></td></tr></table></figure><h4 id="18-3-字符串连接通过-号"><a href="#18-3-字符串连接通过-号" class="headerlink" title="18.3 字符串连接通过+号"></a>18.3 字符串连接通过+号</h4><h4 id="18-4-字符串转换"><a href="#18-4-字符串转换" class="headerlink" title="18.4 字符串转换"></a>18.4 字符串转换</h4><h5 id="1-转换方式"><a href="#1-转换方式" class="headerlink" title="1.转换方式"></a>1.转换方式</h5><p>这是将值<code>x</code>转换为字符串的三种方法：</p><ul><li><code>String(x)</code></li><li><code>&#39;&#39;+x</code></li><li><code>x.toString()</code>（不适用于<code>undefined</code>和<code>null</code>）</li></ul><p>建议：使用具有描述性和安全性的<code>String()</code>。</p><h5 id="2-字符串化对象"><a href="#2-字符串化对象" class="headerlink" title="2.字符串化对象"></a>2.字符串化对象</h5><p>普通对象的默认字符串表示形式不是很有用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">String</span>(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="string">'[object Object]'</span></span><br></pre></td></tr></table></figure><p>数组具有更好的字符串表示形式</p><h3 id="第二十章-符号-Symbol"><a href="#第二十章-符号-Symbol" class="headerlink" title="第二十章  符号(Symbol)"></a>第二十章  符号(Symbol)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;暑假学习了《Javascript for impatient programmers》，为了能够深刻和全面地理解这本书的内容，我就想自己好好总结一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="js" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>换电脑所导致的一些麻烦事</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/24/%E6%8D%A2%E7%94%B5%E8%84%91%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BA%BB%E7%83%A6%E4%BA%8B/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/24/%E6%8D%A2%E7%94%B5%E8%84%91%E6%89%80%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BA%BB%E7%83%A6%E4%BA%8B/</id>
    <published>2020-05-23T17:30:00.000Z</published>
    <updated>2020-07-15T02:52:17.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="换电脑所导致的一些麻烦事"><a href="#换电脑所导致的一些麻烦事" class="headerlink" title="换电脑所导致的一些麻烦事"></a>换电脑所导致的一些麻烦事</h2><blockquote><p>上一台电脑出现了较大的故障，把它修好的花销比较多，我就趁机入了喜欢的新机，但麻烦也随之而来。新电脑虽然香，但是环境都得重新装过，还有一些事情想分享给大家。大家以后换电脑的时候应该能对你们有所帮助。</p></blockquote><a id="more"></a><h3 id="hexo的搬迁"><a href="#hexo的搬迁" class="headerlink" title="hexo的搬迁"></a>hexo的搬迁</h3><p>换电脑后要想继续写Blog，需要将Hexo博客从一台电脑迁移到换的电脑上</p><p>具体的操作：</p><p>1.克隆github上面生成的静态文件到本地</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/yourname/yourname.github.io.git</span></span><br></pre></td></tr></table></figure><p>2.把克隆到本地的文件除了git的文件都删掉，找不到git的文件也都删了</p><p><strong>注意</strong>：不要用<code>hexo init</code>初始化</p><p>3.将之前使用hexo写博客时候的所有文件夹搬迁到现在的电脑上，可以忽略node_modules文件夹(之后再用<code>npm install</code>重新安装)</p><p>还有.git文件也可忽略，并用下面的代码重新生成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-class">.gitignore</span></span><br></pre></td></tr></table></figure><p>4.创建一个叫hexo的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>5.提交复制过来的文件到暂存区再提交</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> --all</span><br><span class="line">git commit -m <span class="string">"新建分支源文件"</span></span><br></pre></td></tr></table></figure><p>6.推送分支到github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><p>到这里还没有结束，因为换了电脑，密钥也发生了改变，我们需要重新在github上添加新的密钥</p><p>7.在本地添加SSH key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>只需把邮件地址换成自己的邮件地址，然后一路回车，使用默认值就可</p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，其中id_rsa是私钥，不能泄露出去，而id_rsa.pub是公钥，可以放心地告诉任何人，所以复制id_rsa.pub文件中的内容。</p><p>8.在github中添加SSH key</p><p>登陆github，点击用户头像并打开settings，再点击“SSH and GPG Keys”，然后点“Add SSH Key”，填上任意的Title，在Key文本框里粘贴id_rsa.pub文件的内容，最后点“Add Key”，就可以看到已经添加的密钥</p><p>9.验证</p><p>点“Add Key”之后还可以用<code>$ ssh git@github.com</code>验证有没有添加成功</p><h3 id="重新和github仓库建立连接"><a href="#重新和github仓库建立连接" class="headerlink" title="重新和github仓库建立连接"></a>重新和github仓库建立连接</h3><p>1.重新生成密钥（和上文相同</p><p>2.新建一个文件夹，在这个新文件夹下新建一个git本地仓库，将终端在这个文件夹的路径下打开，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>3.设置用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>4.设置你想要建立对应连接的远程仓库地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:XXXXXXX/xxxxxxx.git</span><br></pre></td></tr></table></figure><p><strong>这里的地址填写github仓库的SSH地址</strong></p><p>5.把远程仓库的源代码拉取到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>接下来有一系列信息，可以直接回车</p><p>在提示【The authenticity of host ‘github.com (192.30.253.112)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)?】</p><p>这一步骤的时候，不要直接敲回车，直接输入yes，不然会报错<br>6.建立本地分支和远程分支的追踪关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master</span><br></pre></td></tr></table></figure><p>到这一步，本地仓库重新与github远程仓库建立了连接</p><p>再次执行git pull,出现up to date就没问题了</p><p>参考文献：</p><p>1.<a href="https://www.jianshu.com/p/beb8d611340a" target="_blank" rel="noopener">Hexo博客从一台电脑迁移到其他电脑</a></p><p>2.<a href="https://blog.csdn.net/mzm2438975656/article/details/52523163" target="_blank" rel="noopener">Git配置SSH,并Push到GitHub上的相关流程</a></p><p>3.<a href="https://www.jianshu.com/p/a0a00965bac9" target="_blank" rel="noopener">换了电脑或者重装了系统后如何重新和github仓库建立连接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;换电脑所导致的一些麻烦事&quot;&gt;&lt;a href=&quot;#换电脑所导致的一些麻烦事&quot; class=&quot;headerlink&quot; title=&quot;换电脑所导致的一些麻烦事&quot;&gt;&lt;/a&gt;换电脑所导致的一些麻烦事&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;上一台电脑出现了较大的故障，把它修好的花销比较多，我就趁机入了喜欢的新机，但麻烦也随之而来。新电脑虽然香，但是环境都得重新装过，还有一些事情想分享给大家。大家以后换电脑的时候应该能对你们有所帮助。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于React Router的分享</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/23/%E5%85%B3%E4%BA%8EReact%20Router%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2020/05/23/%E5%85%B3%E4%BA%8EReact%20Router%E7%9A%84%E5%88%86%E4%BA%AB/</id>
    <published>2020-05-22T16:33:49.000Z</published>
    <updated>2020-07-11T09:14:11.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享：-一些关于React-Router的知识"><a href="#分享：-一些关于React-Router的知识" class="headerlink" title="分享： 一些关于React Router的知识"></a>分享： 一些关于React Router的知识</h2><p>这段时间一直在用react写miniproject，所以小小归纳一下路由和有关方面的知识</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>React Router是一个基于React之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与URL间的同步。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>当我们安装好React App和所需环境并创建一个新项目后，cd进入此项目，然后按条件选择输入以下的一条代码，完成安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom</span><br><span class="line">yarn add react-router</span><br></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>路由配置是一组指令，用来告诉router如何匹配URL以及匹配后如何执行代码。</p><p>下面是在miniproject中运用React Router的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//先导入react和相关组件(之后总结</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">    BrowserRouter as Router,</span><br><span class="line">    Route,</span><br><span class="line">    Switch,</span><br><span class="line">    Redirect</span><br><span class="line">&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">//再导入相关的页面组件</span><br><span class="line">import HomePage from &quot;./pages/homepage/HomePage&quot;;</span><br><span class="line">import Search from &quot;./pages/search/search&quot;;</span><br><span class="line">...</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  //最后配置要匹配的URL</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">        &lt;Redirect exact from=&quot;/&quot; to=&quot;/homepage&quot; /&gt; </span><br><span class="line">        &lt;Route path=&quot;/homepage&quot; component=&#123;HomePage&#125; /&gt;</span><br><span class="line">        &lt;Route path=&quot;/sort&quot; component=&#123;Sort&#125; /&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//然后在相应的页面组件中就可以进行运用</span><br><span class="line">//如导入Link组件</span><br><span class="line">import &#123;Link&#125; from &quot;react-router-dom&quot;;</span><br><span class="line">...</span><br><span class="line">//并在render函数中渲染</span><br><span class="line">&lt;Link to=&#123;&quot;/sort&quot;&#125;&gt;</span><br><span class="line">    &lt;div className=&quot;top-words&quot;&gt;分类&lt;/div&gt;</span><br><span class="line">&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>通过上面的配置，应用的渲染方式为：</p><table><thead><tr><th align="center">URL</th><th align="center">组件</th></tr></thead><tbody><tr><td align="center">/</td><td align="center">Homepage</td></tr><tr><td align="center">/sort</td><td align="center">Homepage -&gt; Sort</td></tr></tbody></table><h3 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h3><p>路由组件可能是React Router中最需要理解和学习使用的组件。它最基本的职责是在路径与当前URL匹配时呈现一些UI。如下例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/homepage&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>由path-to-regexp可以理解的任何有效URL路径或路径数组。<strong>注意</strong>：没有路径始终匹配的路由</p><p>路径可分为四种模式。</p><ol><li><p>确切模式路径</p><p>仅当路径与其路径名称的位置(location.pathname) <em>完全</em>匹配时才匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=&quot;/one&quot;&gt;</span><br><span class="line">  &lt;About /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure></li><li><p>严格模式路径</p><p>带有斜杠的路径只会与带有斜杠的路径名称的位置（location.pathname）匹配。当路径名称的位置（location.pathname）中有其他网址分段时，此功能无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route strict path=&quot;/one/&quot;&gt;</span><br><span class="line">  &lt;About /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：严格路径可以用来执行一个结尾没有斜线的路径名称的位置，但为了做到这一点，<code>strict</code>和<code>exact</code>必须都满足。</p></li><li><p>敏感模式路径</p><p>如果路径区别大小写则匹</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route sensitive path=<span class="string">"/one"</span>&gt;</span><br><span class="line">  &lt;About /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：其它一些组件同样有这三种区别，如<code>&lt;Redirect&gt;</code></p></li></ol><h3 id="重定向组件"><a href="#重定向组件" class="headerlink" title="重定向组件"></a>重定向组件</h3><p>1.渲染<code>&lt;Redirect&gt;</code>会导航到新位置。新位置将覆盖历史记录堆栈中的当前位置，就像服务器端重定向（HTTP 3xx）一样。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect exact from=&quot;/&quot; to=&quot;/homepage&quot; /&gt;</span><br></pre></td></tr></table></figure><p>2.<code>to</code>中可以写重定向到的URL或位置。<strong>注意</strong>：所有在<code>to</code>中使用的URL参数必须被<code>from</code>中的覆盖。</p><p>3.<code>push</code>正确运用时，重定向会将新条目推入历史记录，而不是替换当前条目。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Redirect push to=&quot;/somewhere/else&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="Switch组件"><a href="#Switch组件" class="headerlink" title="Switch组件"></a>Switch组件</h3><p>与一堆<strong><code>&lt;Route&gt;</code>s</strong>相比，它的独特之处在于它专门渲染了一条路线。而在一堆<strong><code>&lt;Route&gt;</code>s中</strong>，每个与位置匹配的<strong><code>&lt;Route&gt;</code></strong>都<em>包含在渲染内</em>。例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Route, Switch &#125; from &quot;react-router&quot;;</span><br><span class="line"></span><br><span class="line">let routes = (</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">    &lt;Route /&gt; </span><br><span class="line">    &lt;Route /&gt;</span><br><span class="line">    &lt;Route /&gt;</span><br><span class="line">  &lt;/Switch&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>只渲染第一个与位置匹配的子路由组件或重定向组件。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>它是React Router仅有的两个主要依赖项之一（除了React本身），它提供了几种不同的实现来管理各种环境中JavaScript的会话历史。</p><p><code>history</code>对象插件的使用可通过如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install history --save</span><br><span class="line">import createHistory from &apos;history/createBrowserHistory&apos;</span><br></pre></td></tr></table></figure><p><code>history</code> 对象通常具有以下属性和方法：</p><ul><li><p><code>length</code> -（数字）历史记录堆栈中的条目数</p></li><li><p><code>action</code>- （字符串）当前动作（<code>PUSH</code>，<code>REPLACE</code>，或<code>POP</code>）</p></li><li><p><code>location</code></p><p>-（对象）当前位置。可能具有以下属性：</p><ul><li><code>pathname</code> -（字符串）URL的路径</li><li><code>search</code> -（字符串）URL查询字符串</li><li><code>hash</code> -（字符串）URL哈希片段</li><li><code>state</code>-（对象）特定位置的状态，例如通过<code>push(path, state)</code>在将该位置推入堆栈时所提供的状态。仅在浏览器和内存历史记录中可用。</li></ul></li><li><p><code>push(path, [state])</code> -（函数）将新条目推入历史记录堆栈</p></li><li><p><code>replace(path, [state])</code> -（函数）替换历史记录堆栈上的当前条目</p></li><li><p><code>go(n)</code>-（函数）通过<code>n</code>条目在历史记录堆栈中移动指针</p></li><li><p><code>goBack()</code> -（函数）等同于 <code>go(-1)</code>     如以下一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">class SrBack extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            history: require(&quot;history&quot;).createHashHistory,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goback = () =&gt; &#123;</span><br><span class="line">        this.state.history().goBack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;img src=&#123;back&#125; onClick=&#123;this.goback&#125; alt=&quot;backButton&quot; className=&quot;backButton&quot;/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>goForward()</code> -（函数）等同于 <code>go(1)</code></p></li><li><p><code>block(prompt)</code>-（函数）防止导航</p><p>待补…</p><p>参考文献： <a href="https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string" target="_blank" rel="noopener"> React Route</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分享：-一些关于React-Router的知识&quot;&gt;&lt;a href=&quot;#分享：-一些关于React-Router的知识&quot; class=&quot;headerlink&quot; title=&quot;分享： 一些关于React Router的知识&quot;&gt;&lt;/a&gt;分享： 一些关于React Router的知识&lt;/h2&gt;&lt;p&gt;这段时间一直在用react写miniproject，所以小小归纳一下路由和有关方面的知识&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="react" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>http总结分享</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/12/07/http%E6%80%BB%E7%BB%93%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/12/07/http%E6%80%BB%E7%BB%93%E5%88%86%E4%BA%AB/</id>
    <published>2019-12-07T10:57:22.000Z</published>
    <updated>2020-05-25T14:09:26.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-TP协议族"><a href="#TCP-TP协议族" class="headerlink" title="TCP/TP协议族"></a>TCP/TP协议族</h2><p>其实机器是很笨的，没有任何智商，想让机器之间通信，必须要有一套完整通信规则，包括如何到达通信目标，使用的传输类型，等等都需要一套规范，这一整套规范就是协议。TCP/IP协议就是其中的这么一套协议族。</p><a id="more"></a><h2 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h2><p>TCP/IP 协议族按层次分别分 为以下 4 层：应用层、传输层、网络层和数据链路层。处于不同层上的可以只考虑分派给自己的任务。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>决定了向用户提供应用服务时通信的活动。</p><p>具体协议有：HTTP，FTP（文件传输协议），DNS（域名系统，就是IP与域名互相转换）等。可见HTTP 协议处于该层。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</p><p>有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报 协议）。</p><h3 id="网络层（又名网络互连层）"><a href="#网络层（又名网络互连层）" class="headerlink" title="网络层（又名网络互连层）"></a>网络层（又名网络互连层）</h3><p>规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</p><h3 id="链路层（又名数据链路层，网络接口层）"><a href="#链路层（又名数据链路层，网络接口层）" class="headerlink" title="链路层（又名数据链路层，网络接口层）"></a>链路层（又名数据链路层，网络接口层）</h3><p>用来处理连接网络的硬件部分。</p><h2 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h2><p><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/1.png" alt="图片"></p><p>这是整个通信过程中数据流的走向。这种把数据信息包装起来的做法称为封装。</p><h2 id="重要的HTTP协议"><a href="#重要的HTTP协议" class="headerlink" title="重要的HTTP协议"></a>重要的HTTP协议</h2><p>HTTP协议一般是用户客户端和服务器之间的通信。</p><h3 id="负责传输的-IP-协议"><a href="#负责传输的-IP-协议" class="headerlink" title="负责传输的 IP 协议"></a>负责传输的 IP 协议</h3><p>IP（Internet Protocol）网际协议位于网络层。作用是把各种数据包传送给对方。。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址</p><p><strong>注意：不要把“IP”和“IP 地址”搞混，“IP”其实是一种协议的名称。</strong></p><h3 id="确保可靠性的-TCP-协议"><a href="#确保可靠性的-TCP-协议" class="headerlink" title="确保可靠性的 TCP 协议"></a>确保可靠性的 TCP 协议</h3><p>位于传输层。为了更容易传送大数据把数据分割，而且能够确认数据最终是否送达到对方。</p><h3 id="负责域名解析的-DNS-服务"><a href="#负责域名解析的-DNS-服务" class="headerlink" title="负责域名解析的 DNS 服务"></a>负责域名解析的 DNS 服务</h3><p>位于应用层的协议。提供通过域名 查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p><h2 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h2><p>URL（Uniform Resource Locator，统一资源定位符）是使用Web浏览器等访问 We 页面时需要输入的网页地址。</p><p>URI（Uniform Resource Identifier，统一资源标识符）是由某个协议方案表示的资源的定位标识符。协议 方案是指访问资源所使用的协议类型名称。</p><p>URI 用字符串<strong>标识</strong>某一互联网资源，而 URL 表示资源的<strong>地点</strong>（互联 网上所处的位置）。可见 URL 是 URI 的子集。 </p><p>表示指定的 URI，要使用涵盖全部必要信息的绝对 URI、绝对 URL 以 及相对 URL。</p><p>绝对 URI 的格式：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/2.png" alt></p><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><p>用于HTTP协议交互的信息被称为 HTTP 报文。请求必定由客户端发出，而服务器端回复响应。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。<br>请求报文的结构：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/5.png" alt><br>实例:<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/3.png" alt><br>响应报文的结构：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/6.png" alt><br>实例：<img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/4.png" alt></p><h2 id="HTTP是无状态的协议"><a href="#HTTP是无状态的协议" class="headerlink" title="HTTP是无状态的协议"></a>HTTP是无状态的协议</h2><p>HTTP 是一种不保存状态，即无状态协议。为了更快地处理大量事务，确保协议的可伸缩性，自身不具备保存之前发送过的请求或响应的功能。（但有了Cookie再用 HTTP协议通信，就可以管理状态。）</p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>GET：一般是获取资源。</p><p>POST：一般是传输实体主题，主要目的是将信息告诉服务器。</p><p>HEAD：获取报文的首部，一般不返回报文主题，确认资源URI是否有效 </p><p>OPTIONS：查询针对请求URI指定的资源支持的方法。 </p><p>PUT：：传输文件。一般不使用。</p><p>DELETE : 删除资源，一般很少用。</p><p>CONNECT：要求用隧道协议连接代理 。</p><h2 id="返回结果的HTTP状态码"><a href="#返回结果的HTTP状态码" class="headerlink" title="返回结果的HTTP状态码"></a>返回结果的HTTP状态码</h2><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结 果。借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。以3位数字和原因短语组成。数字中的第一位指定了响应类别后两位无分类。响应类别有以下 5 种。</p><p><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/7.png" alt></p><p>其中200 OK：表示请求成功，服务器也成功返回响应</p><p>204 No Content :服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体</p><p>206 Partial Content :表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求</p><p>301 Moved Permanently：永久重定向，浏览器会记下来，下次访问会直接发请求到被重定向的新位置</p><p>302 Found：临时重定向，只是这一次的请求被重定向了，下次还是会将请求，发送到旧的位置上</p><p>303 See Other:表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</p><p>304 Not Modified：缓存重定向，表示缓存的内容没被改变，浏览器可以直接使用缓存</p><p>307 Temporary Redirect 临时重定向:该状态码与 302 Found 有着相同的含义。</p><p>400 Bad Request: 该状态码表示请求报文中存在语法错误</p><p>401  Unauthorized：表示未授权，需要做用户验证</p><p>403 Forbidden：表示用户被禁止访问</p><p>404 Not Found：表示用户请求的资源找不到</p><p>500  Internal Server Error：服务器处理请求过程中发生了错误</p><p>503  Service Unavailable：服务器暂时无法使用，可能是因为停机维护或者服务器超载</p><h2 id="通信数据转发程序-：代理、网关、隧道"><a href="#通信数据转发程序-：代理、网关、隧道" class="headerlink" title="通信数据转发程序 ：代理、网关、隧道"></a>通信数据转发程序 ：代理、网关、隧道</h2><p>HTTP 通信时，除客户端和服务器以外，还有一些用于通信数据转发的应用程序，例如代理、网关和隧道。它们可以配合服务器工作。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。由代理服务器执行这个基本行为。持有资源实体的服务器被称为源服务器。每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息。</p><p><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/http/8.png" alt></p><p>代理分为缓存代理和透明代理。前者会预先将资源的副本（缓存）保存在代理服务器上。接到相同请求时可直接将缓存作为响应返回。后者不对报文做任何加工。</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>能使通信线路上的服务器提供非 HTTP 协议服务。且能提高通信的安全性，因为可以在客户端与网关之间的通信 线路上加密以确保连接的安全。</p><h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路。目的是确保客户端能与服务器进行安全的通信。本身不会去解析 HTTP 请求，与通信一起开始与结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-TP协议族&quot;&gt;&lt;a href=&quot;#TCP-TP协议族&quot; class=&quot;headerlink&quot; title=&quot;TCP/TP协议族&quot;&gt;&lt;/a&gt;TCP/TP协议族&lt;/h2&gt;&lt;p&gt;其实机器是很笨的，没有任何智商，想让机器之间通信，必须要有一套完整通信规则，包括如何到达通信目标，使用的传输类型，等等都需要一套规范，这一整套规范就是协议。TCP/IP协议就是其中的这么一套协议族。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="http" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>消除间隙的分享</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/08/%E6%B6%88%E9%99%A4%E9%97%B4%E9%9A%99%E7%9A%84%E5%88%86%E4%BA%AB/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/08/%E6%B6%88%E9%99%A4%E9%97%B4%E9%9A%99%E7%9A%84%E5%88%86%E4%BA%AB/</id>
    <published>2019-11-07T16:48:38.000Z</published>
    <updated>2020-07-11T09:14:03.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题：采用inline-block布局时会出现div之间有间隙的情况"><a href="#问题：采用inline-block布局时会出现div之间有间隙的情况" class="headerlink" title="问题：采用inline-block布局时会出现div之间有间隙的情况"></a>问题：采用inline-block布局时会出现div之间有间隙的情况</h1><p>如以下图片所示<br><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/exm.png" alt="实例"></p><p>这是它的css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.searchborder</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">3px</span> <span class="number">#F44336</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.searchlogo</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>它的html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="消除间隙的方法"><a href="#消除间隙的方法" class="headerlink" title="消除间隙的方法"></a>消除间隙的方法</h1><ol><li>font-size法</li><li>移除空格法</li><li>margin负值法</li><li>无闭合标签法</li><li>letter-spacing法</li><li>Word-spacing法</li></ol><h2 id="font-size法"><a href="#font-size法" class="headerlink" title="font-size法"></a>font-size法</h2><p>我们可以通过对父元素使用 <code>font-size:0</code>  实现消除间隙。<br>如以下代码所示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图为<br><img src="https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/exm2.png" alt="实例"></p><h2 id="移除空格法"><a href="#移除空格法" class="headerlink" title="移除空格法"></a>移除空格法</h2><p>元素间留白间距出现的原因就是标签段之间的空格，因此，<strong>去掉HTML中的空格</strong>，自然间距就没了。考虑到代码可读性，显然连成一行的写法是不可取的，我们可以这么写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者这么写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者借助HTML注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"searchborder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    --&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-block"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"photo/search.png"</span> <span class="attr">class</span>=<span class="string">"searchlogo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等。可实现理想效果。</p><h2 id="margin负值法"><a href="#margin负值法" class="headerlink" title="margin负值法"></a>margin负值法</h2><p>我们可以通过<strong>修改元素的左右margin</strong>，使其成为<strong>负值</strong>，从而实现间隙的消除，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inline-block</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：margin负值的大小并不确定，与上下文的字体和文字大小相关，需自己调试到理想效果。<br>由于外部环境的不确定性，以及最后一个元素多出的父margin值等问题，这个方法不适合大规模使用。</p><h2 id="无闭合标签法"><a href="#无闭合标签法" class="headerlink" title="无闭合标签法"></a>无闭合标签法</h2><p>我们可以通过去除子元素的闭合标签来实现效果，由于我的例子并非单纯的div，img与input无闭合标签，下面采用其他例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>考虑到IE6/IE7浏览器的兼容性，最后一个列表的标签的结束（闭合）标签不能丢。<br>在HTML5中，我们可以直接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="letter-spacing法"><a href="#letter-spacing法" class="headerlink" title="letter-spacing法"></a>letter-spacing法</h2><p>我们可以通过给父元素设置letter-spacing的负值从而来消除间隙。<br>如以下代码所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此方法与margin负值法一样需根据实际情况调整负值的大小。负值小到理想值时再变小也不会有变化。</p><h2 id="Word-spacing法"><a href="#Word-spacing法" class="headerlink" title="Word-spacing法"></a>Word-spacing法</h2><p>我们可以通过给父元素设置Word-spacing的负值来消除间隙。<br>如以下代码所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此方法与上一种方法也大同小异，也需自行调整。负值小到理想值时再变小也不会有变化。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前我只找到了以上几种方法，仍待补充。<br>总的来说，移除空格和无闭合标签法较不为推荐，改变格式后容易出错，其它几种都比较方便。<br>参考文献  <a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">《去除inline-block元素间间距的N种方法》By赵鑫旭</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题：采用inline-block布局时会出现div之间有间隙的情况&quot;&gt;&lt;a href=&quot;#问题：采用inline-block布局时会出现div之间有间隙的情况&quot; class=&quot;headerlink&quot; title=&quot;问题：采用inline-block布局时会出现div之间有间隙的情况&quot;&gt;&lt;/a&gt;问题：采用inline-block布局时会出现div之间有间隙的情况&lt;/h1&gt;&lt;p&gt;如以下图片所示&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/shenjiayao-sjy/markdown-photos/master/exm.png&quot; alt=&quot;实例&quot;&gt;&lt;/p&gt;&lt;p&gt;这是它的css&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.search&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;80px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: bottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.searchborder&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: solid &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;#F44336&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;250px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: bottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.searchlogo&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;35px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;: bottom;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.inline-block&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="html-css" scheme="http://github.com/shenjiayao-sjy/shenjiayao.github.io/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/03/hello-world/"/>
    <id>http://github.com/shenjiayao-sjy/shenjiayao.github.io/2019/11/03/hello-world/</id>
    <published>2019-11-02T16:31:30.000Z</published>
    <updated>2020-05-25T14:09:28.534Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
